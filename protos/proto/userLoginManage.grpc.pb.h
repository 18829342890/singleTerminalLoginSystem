// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: userLoginManage.proto
#ifndef GRPC_userLoginManage_2eproto__INCLUDED
#define GRPC_userLoginManage_2eproto__INCLUDED

#include "userLoginManage.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace proto {
namespace userLoginManage {

class userLoginManageService final {
 public:
  static constexpr char const* service_full_name() {
    return "proto.userLoginManage.userLoginManageService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // regist
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::proto::userLoginManage::RegistRequest, ::proto::userLoginManage::RegistResponse>> regist(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::proto::userLoginManage::RegistRequest, ::proto::userLoginManage::RegistResponse>>(registRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::userLoginManage::RegistRequest, ::proto::userLoginManage::RegistResponse>> Asyncregist(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::userLoginManage::RegistRequest, ::proto::userLoginManage::RegistResponse>>(AsyncregistRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::userLoginManage::RegistRequest, ::proto::userLoginManage::RegistResponse>> PrepareAsyncregist(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::userLoginManage::RegistRequest, ::proto::userLoginManage::RegistResponse>>(PrepareAsyncregistRaw(context, cq));
    }
    // login
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::proto::userLoginManage::LoginRequest, ::proto::userLoginManage::LoginResponse>> login(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::proto::userLoginManage::LoginRequest, ::proto::userLoginManage::LoginResponse>>(loginRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::userLoginManage::LoginRequest, ::proto::userLoginManage::LoginResponse>> Asynclogin(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::userLoginManage::LoginRequest, ::proto::userLoginManage::LoginResponse>>(AsyncloginRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::userLoginManage::LoginRequest, ::proto::userLoginManage::LoginResponse>> PrepareAsynclogin(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::userLoginManage::LoginRequest, ::proto::userLoginManage::LoginResponse>>(PrepareAsyncloginRaw(context, cq));
    }
    // logout
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::proto::userLoginManage::LogoutRequest, ::proto::userLoginManage::LogoutResponse>> logout(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::proto::userLoginManage::LogoutRequest, ::proto::userLoginManage::LogoutResponse>>(logoutRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::userLoginManage::LogoutRequest, ::proto::userLoginManage::LogoutResponse>> Asynclogout(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::userLoginManage::LogoutRequest, ::proto::userLoginManage::LogoutResponse>>(AsynclogoutRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::userLoginManage::LogoutRequest, ::proto::userLoginManage::LogoutResponse>> PrepareAsynclogout(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::userLoginManage::LogoutRequest, ::proto::userLoginManage::LogoutResponse>>(PrepareAsynclogoutRaw(context, cq));
    }
    // heart beat
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::proto::userLoginManage::HeartBeatRequest, ::proto::userLoginManage::HeartBeatResponse>> heartBeat(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::proto::userLoginManage::HeartBeatRequest, ::proto::userLoginManage::HeartBeatResponse>>(heartBeatRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::userLoginManage::HeartBeatRequest, ::proto::userLoginManage::HeartBeatResponse>> AsyncheartBeat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::userLoginManage::HeartBeatRequest, ::proto::userLoginManage::HeartBeatResponse>>(AsyncheartBeatRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::userLoginManage::HeartBeatRequest, ::proto::userLoginManage::HeartBeatResponse>> PrepareAsyncheartBeat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::userLoginManage::HeartBeatRequest, ::proto::userLoginManage::HeartBeatResponse>>(PrepareAsyncheartBeatRaw(context, cq));
    }
    // kick out user
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::proto::userLoginManage::KickOutUserRequest, ::proto::userLoginManage::KickOutUserResponse>> kickOutUser(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::proto::userLoginManage::KickOutUserRequest, ::proto::userLoginManage::KickOutUserResponse>>(kickOutUserRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::userLoginManage::KickOutUserRequest, ::proto::userLoginManage::KickOutUserResponse>> AsynckickOutUser(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::userLoginManage::KickOutUserRequest, ::proto::userLoginManage::KickOutUserResponse>>(AsynckickOutUserRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::userLoginManage::KickOutUserRequest, ::proto::userLoginManage::KickOutUserResponse>> PrepareAsynckickOutUser(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::userLoginManage::KickOutUserRequest, ::proto::userLoginManage::KickOutUserResponse>>(PrepareAsynckickOutUserRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // regist
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void regist(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::proto::userLoginManage::RegistRequest,::proto::userLoginManage::RegistResponse>* reactor) = 0;
      #else
      virtual void regist(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::proto::userLoginManage::RegistRequest,::proto::userLoginManage::RegistResponse>* reactor) = 0;
      #endif
      // login
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void login(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::proto::userLoginManage::LoginRequest,::proto::userLoginManage::LoginResponse>* reactor) = 0;
      #else
      virtual void login(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::proto::userLoginManage::LoginRequest,::proto::userLoginManage::LoginResponse>* reactor) = 0;
      #endif
      // logout
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void logout(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::proto::userLoginManage::LogoutRequest,::proto::userLoginManage::LogoutResponse>* reactor) = 0;
      #else
      virtual void logout(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::proto::userLoginManage::LogoutRequest,::proto::userLoginManage::LogoutResponse>* reactor) = 0;
      #endif
      // heart beat
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void heartBeat(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::proto::userLoginManage::HeartBeatRequest,::proto::userLoginManage::HeartBeatResponse>* reactor) = 0;
      #else
      virtual void heartBeat(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::proto::userLoginManage::HeartBeatRequest,::proto::userLoginManage::HeartBeatResponse>* reactor) = 0;
      #endif
      // kick out user
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void kickOutUser(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::proto::userLoginManage::KickOutUserRequest,::proto::userLoginManage::KickOutUserResponse>* reactor) = 0;
      #else
      virtual void kickOutUser(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::proto::userLoginManage::KickOutUserRequest,::proto::userLoginManage::KickOutUserResponse>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderWriterInterface< ::proto::userLoginManage::RegistRequest, ::proto::userLoginManage::RegistResponse>* registRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::proto::userLoginManage::RegistRequest, ::proto::userLoginManage::RegistResponse>* AsyncregistRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::proto::userLoginManage::RegistRequest, ::proto::userLoginManage::RegistResponse>* PrepareAsyncregistRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::proto::userLoginManage::LoginRequest, ::proto::userLoginManage::LoginResponse>* loginRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::proto::userLoginManage::LoginRequest, ::proto::userLoginManage::LoginResponse>* AsyncloginRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::proto::userLoginManage::LoginRequest, ::proto::userLoginManage::LoginResponse>* PrepareAsyncloginRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::proto::userLoginManage::LogoutRequest, ::proto::userLoginManage::LogoutResponse>* logoutRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::proto::userLoginManage::LogoutRequest, ::proto::userLoginManage::LogoutResponse>* AsynclogoutRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::proto::userLoginManage::LogoutRequest, ::proto::userLoginManage::LogoutResponse>* PrepareAsynclogoutRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::proto::userLoginManage::HeartBeatRequest, ::proto::userLoginManage::HeartBeatResponse>* heartBeatRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::proto::userLoginManage::HeartBeatRequest, ::proto::userLoginManage::HeartBeatResponse>* AsyncheartBeatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::proto::userLoginManage::HeartBeatRequest, ::proto::userLoginManage::HeartBeatResponse>* PrepareAsyncheartBeatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::proto::userLoginManage::KickOutUserRequest, ::proto::userLoginManage::KickOutUserResponse>* kickOutUserRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::proto::userLoginManage::KickOutUserRequest, ::proto::userLoginManage::KickOutUserResponse>* AsynckickOutUserRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::proto::userLoginManage::KickOutUserRequest, ::proto::userLoginManage::KickOutUserResponse>* PrepareAsynckickOutUserRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReaderWriter< ::proto::userLoginManage::RegistRequest, ::proto::userLoginManage::RegistResponse>> regist(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::proto::userLoginManage::RegistRequest, ::proto::userLoginManage::RegistResponse>>(registRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::proto::userLoginManage::RegistRequest, ::proto::userLoginManage::RegistResponse>> Asyncregist(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::proto::userLoginManage::RegistRequest, ::proto::userLoginManage::RegistResponse>>(AsyncregistRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::proto::userLoginManage::RegistRequest, ::proto::userLoginManage::RegistResponse>> PrepareAsyncregist(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::proto::userLoginManage::RegistRequest, ::proto::userLoginManage::RegistResponse>>(PrepareAsyncregistRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::proto::userLoginManage::LoginRequest, ::proto::userLoginManage::LoginResponse>> login(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::proto::userLoginManage::LoginRequest, ::proto::userLoginManage::LoginResponse>>(loginRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::proto::userLoginManage::LoginRequest, ::proto::userLoginManage::LoginResponse>> Asynclogin(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::proto::userLoginManage::LoginRequest, ::proto::userLoginManage::LoginResponse>>(AsyncloginRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::proto::userLoginManage::LoginRequest, ::proto::userLoginManage::LoginResponse>> PrepareAsynclogin(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::proto::userLoginManage::LoginRequest, ::proto::userLoginManage::LoginResponse>>(PrepareAsyncloginRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::proto::userLoginManage::LogoutRequest, ::proto::userLoginManage::LogoutResponse>> logout(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::proto::userLoginManage::LogoutRequest, ::proto::userLoginManage::LogoutResponse>>(logoutRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::proto::userLoginManage::LogoutRequest, ::proto::userLoginManage::LogoutResponse>> Asynclogout(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::proto::userLoginManage::LogoutRequest, ::proto::userLoginManage::LogoutResponse>>(AsynclogoutRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::proto::userLoginManage::LogoutRequest, ::proto::userLoginManage::LogoutResponse>> PrepareAsynclogout(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::proto::userLoginManage::LogoutRequest, ::proto::userLoginManage::LogoutResponse>>(PrepareAsynclogoutRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::proto::userLoginManage::HeartBeatRequest, ::proto::userLoginManage::HeartBeatResponse>> heartBeat(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::proto::userLoginManage::HeartBeatRequest, ::proto::userLoginManage::HeartBeatResponse>>(heartBeatRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::proto::userLoginManage::HeartBeatRequest, ::proto::userLoginManage::HeartBeatResponse>> AsyncheartBeat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::proto::userLoginManage::HeartBeatRequest, ::proto::userLoginManage::HeartBeatResponse>>(AsyncheartBeatRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::proto::userLoginManage::HeartBeatRequest, ::proto::userLoginManage::HeartBeatResponse>> PrepareAsyncheartBeat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::proto::userLoginManage::HeartBeatRequest, ::proto::userLoginManage::HeartBeatResponse>>(PrepareAsyncheartBeatRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::proto::userLoginManage::KickOutUserRequest, ::proto::userLoginManage::KickOutUserResponse>> kickOutUser(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::proto::userLoginManage::KickOutUserRequest, ::proto::userLoginManage::KickOutUserResponse>>(kickOutUserRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::proto::userLoginManage::KickOutUserRequest, ::proto::userLoginManage::KickOutUserResponse>> AsynckickOutUser(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::proto::userLoginManage::KickOutUserRequest, ::proto::userLoginManage::KickOutUserResponse>>(AsynckickOutUserRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::proto::userLoginManage::KickOutUserRequest, ::proto::userLoginManage::KickOutUserResponse>> PrepareAsynckickOutUser(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::proto::userLoginManage::KickOutUserRequest, ::proto::userLoginManage::KickOutUserResponse>>(PrepareAsynckickOutUserRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void regist(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::proto::userLoginManage::RegistRequest,::proto::userLoginManage::RegistResponse>* reactor) override;
      #else
      void regist(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::proto::userLoginManage::RegistRequest,::proto::userLoginManage::RegistResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void login(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::proto::userLoginManage::LoginRequest,::proto::userLoginManage::LoginResponse>* reactor) override;
      #else
      void login(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::proto::userLoginManage::LoginRequest,::proto::userLoginManage::LoginResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void logout(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::proto::userLoginManage::LogoutRequest,::proto::userLoginManage::LogoutResponse>* reactor) override;
      #else
      void logout(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::proto::userLoginManage::LogoutRequest,::proto::userLoginManage::LogoutResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void heartBeat(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::proto::userLoginManage::HeartBeatRequest,::proto::userLoginManage::HeartBeatResponse>* reactor) override;
      #else
      void heartBeat(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::proto::userLoginManage::HeartBeatRequest,::proto::userLoginManage::HeartBeatResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void kickOutUser(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::proto::userLoginManage::KickOutUserRequest,::proto::userLoginManage::KickOutUserResponse>* reactor) override;
      #else
      void kickOutUser(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::proto::userLoginManage::KickOutUserRequest,::proto::userLoginManage::KickOutUserResponse>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReaderWriter< ::proto::userLoginManage::RegistRequest, ::proto::userLoginManage::RegistResponse>* registRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::proto::userLoginManage::RegistRequest, ::proto::userLoginManage::RegistResponse>* AsyncregistRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::proto::userLoginManage::RegistRequest, ::proto::userLoginManage::RegistResponse>* PrepareAsyncregistRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::proto::userLoginManage::LoginRequest, ::proto::userLoginManage::LoginResponse>* loginRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::proto::userLoginManage::LoginRequest, ::proto::userLoginManage::LoginResponse>* AsyncloginRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::proto::userLoginManage::LoginRequest, ::proto::userLoginManage::LoginResponse>* PrepareAsyncloginRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::proto::userLoginManage::LogoutRequest, ::proto::userLoginManage::LogoutResponse>* logoutRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::proto::userLoginManage::LogoutRequest, ::proto::userLoginManage::LogoutResponse>* AsynclogoutRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::proto::userLoginManage::LogoutRequest, ::proto::userLoginManage::LogoutResponse>* PrepareAsynclogoutRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::proto::userLoginManage::HeartBeatRequest, ::proto::userLoginManage::HeartBeatResponse>* heartBeatRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::proto::userLoginManage::HeartBeatRequest, ::proto::userLoginManage::HeartBeatResponse>* AsyncheartBeatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::proto::userLoginManage::HeartBeatRequest, ::proto::userLoginManage::HeartBeatResponse>* PrepareAsyncheartBeatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::proto::userLoginManage::KickOutUserRequest, ::proto::userLoginManage::KickOutUserResponse>* kickOutUserRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::proto::userLoginManage::KickOutUserRequest, ::proto::userLoginManage::KickOutUserResponse>* AsynckickOutUserRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::proto::userLoginManage::KickOutUserRequest, ::proto::userLoginManage::KickOutUserResponse>* PrepareAsynckickOutUserRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_regist_;
    const ::grpc::internal::RpcMethod rpcmethod_login_;
    const ::grpc::internal::RpcMethod rpcmethod_logout_;
    const ::grpc::internal::RpcMethod rpcmethod_heartBeat_;
    const ::grpc::internal::RpcMethod rpcmethod_kickOutUser_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // regist
    virtual ::grpc::Status regist(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::proto::userLoginManage::RegistResponse, ::proto::userLoginManage::RegistRequest>* stream);
    // login
    virtual ::grpc::Status login(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::proto::userLoginManage::LoginResponse, ::proto::userLoginManage::LoginRequest>* stream);
    // logout
    virtual ::grpc::Status logout(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::proto::userLoginManage::LogoutResponse, ::proto::userLoginManage::LogoutRequest>* stream);
    // heart beat
    virtual ::grpc::Status heartBeat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::proto::userLoginManage::HeartBeatResponse, ::proto::userLoginManage::HeartBeatRequest>* stream);
    // kick out user
    virtual ::grpc::Status kickOutUser(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::proto::userLoginManage::KickOutUserResponse, ::proto::userLoginManage::KickOutUserRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_regist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_regist() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_regist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status regist(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::userLoginManage::RegistResponse, ::proto::userLoginManage::RegistRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestregist(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::proto::userLoginManage::RegistResponse, ::proto::userLoginManage::RegistRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_login() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::userLoginManage::LoginResponse, ::proto::userLoginManage::LoginRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlogin(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::proto::userLoginManage::LoginResponse, ::proto::userLoginManage::LoginRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_logout() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logout(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::userLoginManage::LogoutResponse, ::proto::userLoginManage::LogoutRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlogout(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::proto::userLoginManage::LogoutResponse, ::proto::userLoginManage::LogoutRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_heartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_heartBeat() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_heartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status heartBeat(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::userLoginManage::HeartBeatResponse, ::proto::userLoginManage::HeartBeatRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestheartBeat(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::proto::userLoginManage::HeartBeatResponse, ::proto::userLoginManage::HeartBeatRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_kickOutUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_kickOutUser() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_kickOutUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status kickOutUser(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::userLoginManage::KickOutUserResponse, ::proto::userLoginManage::KickOutUserRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestkickOutUser(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::proto::userLoginManage::KickOutUserResponse, ::proto::userLoginManage::KickOutUserRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_regist<WithAsyncMethod_login<WithAsyncMethod_logout<WithAsyncMethod_heartBeat<WithAsyncMethod_kickOutUser<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_regist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_regist() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackBidiHandler< ::proto::userLoginManage::RegistRequest, ::proto::userLoginManage::RegistResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->regist(context); }));
    }
    ~ExperimentalWithCallbackMethod_regist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status regist(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::userLoginManage::RegistResponse, ::proto::userLoginManage::RegistRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::proto::userLoginManage::RegistRequest, ::proto::userLoginManage::RegistResponse>* regist(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::proto::userLoginManage::RegistRequest, ::proto::userLoginManage::RegistResponse>* regist(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_login() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackBidiHandler< ::proto::userLoginManage::LoginRequest, ::proto::userLoginManage::LoginResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->login(context); }));
    }
    ~ExperimentalWithCallbackMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::userLoginManage::LoginResponse, ::proto::userLoginManage::LoginRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::proto::userLoginManage::LoginRequest, ::proto::userLoginManage::LoginResponse>* login(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::proto::userLoginManage::LoginRequest, ::proto::userLoginManage::LoginResponse>* login(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_logout() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackBidiHandler< ::proto::userLoginManage::LogoutRequest, ::proto::userLoginManage::LogoutResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->logout(context); }));
    }
    ~ExperimentalWithCallbackMethod_logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logout(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::userLoginManage::LogoutResponse, ::proto::userLoginManage::LogoutRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::proto::userLoginManage::LogoutRequest, ::proto::userLoginManage::LogoutResponse>* logout(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::proto::userLoginManage::LogoutRequest, ::proto::userLoginManage::LogoutResponse>* logout(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_heartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_heartBeat() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackBidiHandler< ::proto::userLoginManage::HeartBeatRequest, ::proto::userLoginManage::HeartBeatResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->heartBeat(context); }));
    }
    ~ExperimentalWithCallbackMethod_heartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status heartBeat(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::userLoginManage::HeartBeatResponse, ::proto::userLoginManage::HeartBeatRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::proto::userLoginManage::HeartBeatRequest, ::proto::userLoginManage::HeartBeatResponse>* heartBeat(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::proto::userLoginManage::HeartBeatRequest, ::proto::userLoginManage::HeartBeatResponse>* heartBeat(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_kickOutUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_kickOutUser() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackBidiHandler< ::proto::userLoginManage::KickOutUserRequest, ::proto::userLoginManage::KickOutUserResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->kickOutUser(context); }));
    }
    ~ExperimentalWithCallbackMethod_kickOutUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status kickOutUser(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::userLoginManage::KickOutUserResponse, ::proto::userLoginManage::KickOutUserRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::proto::userLoginManage::KickOutUserRequest, ::proto::userLoginManage::KickOutUserResponse>* kickOutUser(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::proto::userLoginManage::KickOutUserRequest, ::proto::userLoginManage::KickOutUserResponse>* kickOutUser(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_regist<ExperimentalWithCallbackMethod_login<ExperimentalWithCallbackMethod_logout<ExperimentalWithCallbackMethod_heartBeat<ExperimentalWithCallbackMethod_kickOutUser<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_regist<ExperimentalWithCallbackMethod_login<ExperimentalWithCallbackMethod_logout<ExperimentalWithCallbackMethod_heartBeat<ExperimentalWithCallbackMethod_kickOutUser<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_regist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_regist() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_regist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status regist(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::userLoginManage::RegistResponse, ::proto::userLoginManage::RegistRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_login() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::userLoginManage::LoginResponse, ::proto::userLoginManage::LoginRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_logout() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logout(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::userLoginManage::LogoutResponse, ::proto::userLoginManage::LogoutRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_heartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_heartBeat() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_heartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status heartBeat(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::userLoginManage::HeartBeatResponse, ::proto::userLoginManage::HeartBeatRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_kickOutUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_kickOutUser() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_kickOutUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status kickOutUser(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::userLoginManage::KickOutUserResponse, ::proto::userLoginManage::KickOutUserRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_regist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_regist() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_regist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status regist(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::userLoginManage::RegistResponse, ::proto::userLoginManage::RegistRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestregist(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_login() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::userLoginManage::LoginResponse, ::proto::userLoginManage::LoginRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlogin(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_logout() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logout(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::userLoginManage::LogoutResponse, ::proto::userLoginManage::LogoutRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlogout(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_heartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_heartBeat() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_heartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status heartBeat(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::userLoginManage::HeartBeatResponse, ::proto::userLoginManage::HeartBeatRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestheartBeat(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_kickOutUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_kickOutUser() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_kickOutUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status kickOutUser(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::userLoginManage::KickOutUserResponse, ::proto::userLoginManage::KickOutUserRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestkickOutUser(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_regist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_regist() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->regist(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_regist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status regist(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::userLoginManage::RegistResponse, ::proto::userLoginManage::RegistRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* regist(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* regist(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_login() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->login(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::userLoginManage::LoginResponse, ::proto::userLoginManage::LoginRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* login(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* login(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_logout() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->logout(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logout(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::userLoginManage::LogoutResponse, ::proto::userLoginManage::LogoutRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* logout(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* logout(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_heartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_heartBeat() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->heartBeat(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_heartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status heartBeat(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::userLoginManage::HeartBeatResponse, ::proto::userLoginManage::HeartBeatRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* heartBeat(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* heartBeat(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_kickOutUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_kickOutUser() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->kickOutUser(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_kickOutUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status kickOutUser(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::userLoginManage::KickOutUserResponse, ::proto::userLoginManage::KickOutUserRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* kickOutUser(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* kickOutUser(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};

}  // namespace userLoginManage
}  // namespace proto


#endif  // GRPC_userLoginManage_2eproto__INCLUDED
