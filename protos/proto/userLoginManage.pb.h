// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userLoginManage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_userLoginManage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_userLoginManage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_userLoginManage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_userLoginManage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_userLoginManage_2eproto;
namespace proto {
namespace userLoginManage {
class BasicRequest;
class BasicRequestDefaultTypeInternal;
extern BasicRequestDefaultTypeInternal _BasicRequest_default_instance_;
class BasicResponse;
class BasicResponseDefaultTypeInternal;
extern BasicResponseDefaultTypeInternal _BasicResponse_default_instance_;
class KickOutUserRequest;
class KickOutUserRequestDefaultTypeInternal;
extern KickOutUserRequestDefaultTypeInternal _KickOutUserRequest_default_instance_;
class KickOutUserResponse;
class KickOutUserResponseDefaultTypeInternal;
extern KickOutUserResponseDefaultTypeInternal _KickOutUserResponse_default_instance_;
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
class LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class LogoutRequest;
class LogoutRequestDefaultTypeInternal;
extern LogoutRequestDefaultTypeInternal _LogoutRequest_default_instance_;
class LogoutResponse;
class LogoutResponseDefaultTypeInternal;
extern LogoutResponseDefaultTypeInternal _LogoutResponse_default_instance_;
class RegistRequest;
class RegistRequestDefaultTypeInternal;
extern RegistRequestDefaultTypeInternal _RegistRequest_default_instance_;
class RegistResponse;
class RegistResponseDefaultTypeInternal;
extern RegistResponseDefaultTypeInternal _RegistResponse_default_instance_;
}  // namespace userLoginManage
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::userLoginManage::BasicRequest* Arena::CreateMaybeMessage<::proto::userLoginManage::BasicRequest>(Arena*);
template<> ::proto::userLoginManage::BasicResponse* Arena::CreateMaybeMessage<::proto::userLoginManage::BasicResponse>(Arena*);
template<> ::proto::userLoginManage::KickOutUserRequest* Arena::CreateMaybeMessage<::proto::userLoginManage::KickOutUserRequest>(Arena*);
template<> ::proto::userLoginManage::KickOutUserResponse* Arena::CreateMaybeMessage<::proto::userLoginManage::KickOutUserResponse>(Arena*);
template<> ::proto::userLoginManage::LoginRequest* Arena::CreateMaybeMessage<::proto::userLoginManage::LoginRequest>(Arena*);
template<> ::proto::userLoginManage::LoginResponse* Arena::CreateMaybeMessage<::proto::userLoginManage::LoginResponse>(Arena*);
template<> ::proto::userLoginManage::LogoutRequest* Arena::CreateMaybeMessage<::proto::userLoginManage::LogoutRequest>(Arena*);
template<> ::proto::userLoginManage::LogoutResponse* Arena::CreateMaybeMessage<::proto::userLoginManage::LogoutResponse>(Arena*);
template<> ::proto::userLoginManage::RegistRequest* Arena::CreateMaybeMessage<::proto::userLoginManage::RegistRequest>(Arena*);
template<> ::proto::userLoginManage::RegistResponse* Arena::CreateMaybeMessage<::proto::userLoginManage::RegistResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {
namespace userLoginManage {

// ===================================================================

class BasicRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.userLoginManage.BasicRequest) */ {
 public:
  BasicRequest();
  virtual ~BasicRequest();

  BasicRequest(const BasicRequest& from);
  BasicRequest(BasicRequest&& from) noexcept
    : BasicRequest() {
    *this = ::std::move(from);
  }

  inline BasicRequest& operator=(const BasicRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BasicRequest& operator=(BasicRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BasicRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BasicRequest* internal_default_instance() {
    return reinterpret_cast<const BasicRequest*>(
               &_BasicRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BasicRequest& a, BasicRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BasicRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BasicRequest* New() const final {
    return CreateMaybeMessage<BasicRequest>(nullptr);
  }

  BasicRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BasicRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BasicRequest& from);
  void MergeFrom(const BasicRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.userLoginManage.BasicRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userLoginManage_2eproto);
    return ::descriptor_table_userLoginManage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // string uuid = 2;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.userLoginManage.BasicRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userLoginManage_2eproto;
};
// -------------------------------------------------------------------

class BasicResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.userLoginManage.BasicResponse) */ {
 public:
  BasicResponse();
  virtual ~BasicResponse();

  BasicResponse(const BasicResponse& from);
  BasicResponse(BasicResponse&& from) noexcept
    : BasicResponse() {
    *this = ::std::move(from);
  }

  inline BasicResponse& operator=(const BasicResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BasicResponse& operator=(BasicResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BasicResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BasicResponse* internal_default_instance() {
    return reinterpret_cast<const BasicResponse*>(
               &_BasicResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BasicResponse& a, BasicResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BasicResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BasicResponse* New() const final {
    return CreateMaybeMessage<BasicResponse>(nullptr);
  }

  BasicResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BasicResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BasicResponse& from);
  void MergeFrom(const BasicResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.userLoginManage.BasicResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userLoginManage_2eproto);
    return ::descriptor_table_userLoginManage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kTimestampFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.userLoginManage.BasicResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userLoginManage_2eproto;
};
// -------------------------------------------------------------------

class RegistRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.userLoginManage.RegistRequest) */ {
 public:
  RegistRequest();
  virtual ~RegistRequest();

  RegistRequest(const RegistRequest& from);
  RegistRequest(RegistRequest&& from) noexcept
    : RegistRequest() {
    *this = ::std::move(from);
  }

  inline RegistRequest& operator=(const RegistRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegistRequest& operator=(RegistRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegistRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegistRequest* internal_default_instance() {
    return reinterpret_cast<const RegistRequest*>(
               &_RegistRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegistRequest& a, RegistRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegistRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegistRequest* New() const final {
    return CreateMaybeMessage<RegistRequest>(nullptr);
  }

  RegistRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegistRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegistRequest& from);
  void MergeFrom(const RegistRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegistRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.userLoginManage.RegistRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userLoginManage_2eproto);
    return ::descriptor_table_userLoginManage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 2,
    kPassWordFieldNumber = 3,
    kBasicFieldNumber = 1,
  };
  // string user_name = 2;
  void clear_user_name();
  const std::string& user_name() const;
  void set_user_name(const std::string& value);
  void set_user_name(std::string&& value);
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  std::string* mutable_user_name();
  std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // string pass_word = 3;
  void clear_pass_word();
  const std::string& pass_word() const;
  void set_pass_word(const std::string& value);
  void set_pass_word(std::string&& value);
  void set_pass_word(const char* value);
  void set_pass_word(const char* value, size_t size);
  std::string* mutable_pass_word();
  std::string* release_pass_word();
  void set_allocated_pass_word(std::string* pass_word);
  private:
  const std::string& _internal_pass_word() const;
  void _internal_set_pass_word(const std::string& value);
  std::string* _internal_mutable_pass_word();
  public:

  // .proto.userLoginManage.BasicRequest basic = 1;
  bool has_basic() const;
  private:
  bool _internal_has_basic() const;
  public:
  void clear_basic();
  const ::proto::userLoginManage::BasicRequest& basic() const;
  ::proto::userLoginManage::BasicRequest* release_basic();
  ::proto::userLoginManage::BasicRequest* mutable_basic();
  void set_allocated_basic(::proto::userLoginManage::BasicRequest* basic);
  private:
  const ::proto::userLoginManage::BasicRequest& _internal_basic() const;
  ::proto::userLoginManage::BasicRequest* _internal_mutable_basic();
  public:

  // @@protoc_insertion_point(class_scope:proto.userLoginManage.RegistRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pass_word_;
  ::proto::userLoginManage::BasicRequest* basic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userLoginManage_2eproto;
};
// -------------------------------------------------------------------

class RegistResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.userLoginManage.RegistResponse) */ {
 public:
  RegistResponse();
  virtual ~RegistResponse();

  RegistResponse(const RegistResponse& from);
  RegistResponse(RegistResponse&& from) noexcept
    : RegistResponse() {
    *this = ::std::move(from);
  }

  inline RegistResponse& operator=(const RegistResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegistResponse& operator=(RegistResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegistResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegistResponse* internal_default_instance() {
    return reinterpret_cast<const RegistResponse*>(
               &_RegistResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RegistResponse& a, RegistResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegistResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegistResponse* New() const final {
    return CreateMaybeMessage<RegistResponse>(nullptr);
  }

  RegistResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegistResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegistResponse& from);
  void MergeFrom(const RegistResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegistResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.userLoginManage.RegistResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userLoginManage_2eproto);
    return ::descriptor_table_userLoginManage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBasicFieldNumber = 1,
  };
  // .proto.userLoginManage.BasicResponse basic = 1;
  bool has_basic() const;
  private:
  bool _internal_has_basic() const;
  public:
  void clear_basic();
  const ::proto::userLoginManage::BasicResponse& basic() const;
  ::proto::userLoginManage::BasicResponse* release_basic();
  ::proto::userLoginManage::BasicResponse* mutable_basic();
  void set_allocated_basic(::proto::userLoginManage::BasicResponse* basic);
  private:
  const ::proto::userLoginManage::BasicResponse& _internal_basic() const;
  ::proto::userLoginManage::BasicResponse* _internal_mutable_basic();
  public:

  // @@protoc_insertion_point(class_scope:proto.userLoginManage.RegistResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::userLoginManage::BasicResponse* basic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userLoginManage_2eproto;
};
// -------------------------------------------------------------------

class LoginRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.userLoginManage.LoginRequest) */ {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return CreateMaybeMessage<LoginRequest>(nullptr);
  }

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.userLoginManage.LoginRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userLoginManage_2eproto);
    return ::descriptor_table_userLoginManage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 2,
    kPassWordFieldNumber = 3,
    kBasicFieldNumber = 1,
  };
  // string user_name = 2;
  void clear_user_name();
  const std::string& user_name() const;
  void set_user_name(const std::string& value);
  void set_user_name(std::string&& value);
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  std::string* mutable_user_name();
  std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // string pass_word = 3;
  void clear_pass_word();
  const std::string& pass_word() const;
  void set_pass_word(const std::string& value);
  void set_pass_word(std::string&& value);
  void set_pass_word(const char* value);
  void set_pass_word(const char* value, size_t size);
  std::string* mutable_pass_word();
  std::string* release_pass_word();
  void set_allocated_pass_word(std::string* pass_word);
  private:
  const std::string& _internal_pass_word() const;
  void _internal_set_pass_word(const std::string& value);
  std::string* _internal_mutable_pass_word();
  public:

  // .proto.userLoginManage.BasicRequest basic = 1;
  bool has_basic() const;
  private:
  bool _internal_has_basic() const;
  public:
  void clear_basic();
  const ::proto::userLoginManage::BasicRequest& basic() const;
  ::proto::userLoginManage::BasicRequest* release_basic();
  ::proto::userLoginManage::BasicRequest* mutable_basic();
  void set_allocated_basic(::proto::userLoginManage::BasicRequest* basic);
  private:
  const ::proto::userLoginManage::BasicRequest& _internal_basic() const;
  ::proto::userLoginManage::BasicRequest* _internal_mutable_basic();
  public:

  // @@protoc_insertion_point(class_scope:proto.userLoginManage.LoginRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pass_word_;
  ::proto::userLoginManage::BasicRequest* basic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userLoginManage_2eproto;
};
// -------------------------------------------------------------------

class LoginResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.userLoginManage.LoginResponse) */ {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const final {
    return CreateMaybeMessage<LoginResponse>(nullptr);
  }

  LoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.userLoginManage.LoginResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userLoginManage_2eproto);
    return ::descriptor_table_userLoginManage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBasicFieldNumber = 1,
  };
  // .proto.userLoginManage.BasicResponse basic = 1;
  bool has_basic() const;
  private:
  bool _internal_has_basic() const;
  public:
  void clear_basic();
  const ::proto::userLoginManage::BasicResponse& basic() const;
  ::proto::userLoginManage::BasicResponse* release_basic();
  ::proto::userLoginManage::BasicResponse* mutable_basic();
  void set_allocated_basic(::proto::userLoginManage::BasicResponse* basic);
  private:
  const ::proto::userLoginManage::BasicResponse& _internal_basic() const;
  ::proto::userLoginManage::BasicResponse* _internal_mutable_basic();
  public:

  // @@protoc_insertion_point(class_scope:proto.userLoginManage.LoginResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::userLoginManage::BasicResponse* basic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userLoginManage_2eproto;
};
// -------------------------------------------------------------------

class LogoutRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.userLoginManage.LogoutRequest) */ {
 public:
  LogoutRequest();
  virtual ~LogoutRequest();

  LogoutRequest(const LogoutRequest& from);
  LogoutRequest(LogoutRequest&& from) noexcept
    : LogoutRequest() {
    *this = ::std::move(from);
  }

  inline LogoutRequest& operator=(const LogoutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogoutRequest& operator=(LogoutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogoutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogoutRequest* internal_default_instance() {
    return reinterpret_cast<const LogoutRequest*>(
               &_LogoutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LogoutRequest& a, LogoutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LogoutRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogoutRequest* New() const final {
    return CreateMaybeMessage<LogoutRequest>(nullptr);
  }

  LogoutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogoutRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogoutRequest& from);
  void MergeFrom(const LogoutRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoutRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.userLoginManage.LogoutRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userLoginManage_2eproto);
    return ::descriptor_table_userLoginManage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 2,
    kBasicFieldNumber = 1,
  };
  // string user_name = 2;
  void clear_user_name();
  const std::string& user_name() const;
  void set_user_name(const std::string& value);
  void set_user_name(std::string&& value);
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  std::string* mutable_user_name();
  std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // .proto.userLoginManage.BasicRequest basic = 1;
  bool has_basic() const;
  private:
  bool _internal_has_basic() const;
  public:
  void clear_basic();
  const ::proto::userLoginManage::BasicRequest& basic() const;
  ::proto::userLoginManage::BasicRequest* release_basic();
  ::proto::userLoginManage::BasicRequest* mutable_basic();
  void set_allocated_basic(::proto::userLoginManage::BasicRequest* basic);
  private:
  const ::proto::userLoginManage::BasicRequest& _internal_basic() const;
  ::proto::userLoginManage::BasicRequest* _internal_mutable_basic();
  public:

  // @@protoc_insertion_point(class_scope:proto.userLoginManage.LogoutRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::proto::userLoginManage::BasicRequest* basic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userLoginManage_2eproto;
};
// -------------------------------------------------------------------

class LogoutResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.userLoginManage.LogoutResponse) */ {
 public:
  LogoutResponse();
  virtual ~LogoutResponse();

  LogoutResponse(const LogoutResponse& from);
  LogoutResponse(LogoutResponse&& from) noexcept
    : LogoutResponse() {
    *this = ::std::move(from);
  }

  inline LogoutResponse& operator=(const LogoutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogoutResponse& operator=(LogoutResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogoutResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogoutResponse* internal_default_instance() {
    return reinterpret_cast<const LogoutResponse*>(
               &_LogoutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LogoutResponse& a, LogoutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LogoutResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogoutResponse* New() const final {
    return CreateMaybeMessage<LogoutResponse>(nullptr);
  }

  LogoutResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogoutResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogoutResponse& from);
  void MergeFrom(const LogoutResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoutResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.userLoginManage.LogoutResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userLoginManage_2eproto);
    return ::descriptor_table_userLoginManage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBasicFieldNumber = 1,
  };
  // .proto.userLoginManage.BasicResponse basic = 1;
  bool has_basic() const;
  private:
  bool _internal_has_basic() const;
  public:
  void clear_basic();
  const ::proto::userLoginManage::BasicResponse& basic() const;
  ::proto::userLoginManage::BasicResponse* release_basic();
  ::proto::userLoginManage::BasicResponse* mutable_basic();
  void set_allocated_basic(::proto::userLoginManage::BasicResponse* basic);
  private:
  const ::proto::userLoginManage::BasicResponse& _internal_basic() const;
  ::proto::userLoginManage::BasicResponse* _internal_mutable_basic();
  public:

  // @@protoc_insertion_point(class_scope:proto.userLoginManage.LogoutResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::userLoginManage::BasicResponse* basic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userLoginManage_2eproto;
};
// -------------------------------------------------------------------

class KickOutUserRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.userLoginManage.KickOutUserRequest) */ {
 public:
  KickOutUserRequest();
  virtual ~KickOutUserRequest();

  KickOutUserRequest(const KickOutUserRequest& from);
  KickOutUserRequest(KickOutUserRequest&& from) noexcept
    : KickOutUserRequest() {
    *this = ::std::move(from);
  }

  inline KickOutUserRequest& operator=(const KickOutUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KickOutUserRequest& operator=(KickOutUserRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KickOutUserRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KickOutUserRequest* internal_default_instance() {
    return reinterpret_cast<const KickOutUserRequest*>(
               &_KickOutUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(KickOutUserRequest& a, KickOutUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KickOutUserRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KickOutUserRequest* New() const final {
    return CreateMaybeMessage<KickOutUserRequest>(nullptr);
  }

  KickOutUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KickOutUserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KickOutUserRequest& from);
  void MergeFrom(const KickOutUserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KickOutUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.userLoginManage.KickOutUserRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userLoginManage_2eproto);
    return ::descriptor_table_userLoginManage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 2,
    kBasicFieldNumber = 1,
  };
  // string user_name = 2;
  void clear_user_name();
  const std::string& user_name() const;
  void set_user_name(const std::string& value);
  void set_user_name(std::string&& value);
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  std::string* mutable_user_name();
  std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // .proto.userLoginManage.BasicRequest basic = 1;
  bool has_basic() const;
  private:
  bool _internal_has_basic() const;
  public:
  void clear_basic();
  const ::proto::userLoginManage::BasicRequest& basic() const;
  ::proto::userLoginManage::BasicRequest* release_basic();
  ::proto::userLoginManage::BasicRequest* mutable_basic();
  void set_allocated_basic(::proto::userLoginManage::BasicRequest* basic);
  private:
  const ::proto::userLoginManage::BasicRequest& _internal_basic() const;
  ::proto::userLoginManage::BasicRequest* _internal_mutable_basic();
  public:

  // @@protoc_insertion_point(class_scope:proto.userLoginManage.KickOutUserRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::proto::userLoginManage::BasicRequest* basic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userLoginManage_2eproto;
};
// -------------------------------------------------------------------

class KickOutUserResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.userLoginManage.KickOutUserResponse) */ {
 public:
  KickOutUserResponse();
  virtual ~KickOutUserResponse();

  KickOutUserResponse(const KickOutUserResponse& from);
  KickOutUserResponse(KickOutUserResponse&& from) noexcept
    : KickOutUserResponse() {
    *this = ::std::move(from);
  }

  inline KickOutUserResponse& operator=(const KickOutUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline KickOutUserResponse& operator=(KickOutUserResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KickOutUserResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KickOutUserResponse* internal_default_instance() {
    return reinterpret_cast<const KickOutUserResponse*>(
               &_KickOutUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(KickOutUserResponse& a, KickOutUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(KickOutUserResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KickOutUserResponse* New() const final {
    return CreateMaybeMessage<KickOutUserResponse>(nullptr);
  }

  KickOutUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KickOutUserResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KickOutUserResponse& from);
  void MergeFrom(const KickOutUserResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KickOutUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.userLoginManage.KickOutUserResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userLoginManage_2eproto);
    return ::descriptor_table_userLoginManage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBasicFieldNumber = 1,
  };
  // .proto.userLoginManage.BasicResponse basic = 1;
  bool has_basic() const;
  private:
  bool _internal_has_basic() const;
  public:
  void clear_basic();
  const ::proto::userLoginManage::BasicResponse& basic() const;
  ::proto::userLoginManage::BasicResponse* release_basic();
  ::proto::userLoginManage::BasicResponse* mutable_basic();
  void set_allocated_basic(::proto::userLoginManage::BasicResponse* basic);
  private:
  const ::proto::userLoginManage::BasicResponse& _internal_basic() const;
  ::proto::userLoginManage::BasicResponse* _internal_mutable_basic();
  public:

  // @@protoc_insertion_point(class_scope:proto.userLoginManage.KickOutUserResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::userLoginManage::BasicResponse* basic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userLoginManage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BasicRequest

// int64 timestamp = 1;
inline void BasicRequest::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BasicRequest::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BasicRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.userLoginManage.BasicRequest.timestamp)
  return _internal_timestamp();
}
inline void BasicRequest::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void BasicRequest::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:proto.userLoginManage.BasicRequest.timestamp)
}

// string uuid = 2;
inline void BasicRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BasicRequest::uuid() const {
  // @@protoc_insertion_point(field_get:proto.userLoginManage.BasicRequest.uuid)
  return _internal_uuid();
}
inline void BasicRequest::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:proto.userLoginManage.BasicRequest.uuid)
}
inline std::string* BasicRequest::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:proto.userLoginManage.BasicRequest.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& BasicRequest::_internal_uuid() const {
  return uuid_.GetNoArena();
}
inline void BasicRequest::_internal_set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BasicRequest::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.userLoginManage.BasicRequest.uuid)
}
inline void BasicRequest::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.userLoginManage.BasicRequest.uuid)
}
inline void BasicRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.userLoginManage.BasicRequest.uuid)
}
inline std::string* BasicRequest::_internal_mutable_uuid() {
  
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BasicRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:proto.userLoginManage.BasicRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BasicRequest::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:proto.userLoginManage.BasicRequest.uuid)
}

// -------------------------------------------------------------------

// BasicResponse

// int64 timestamp = 1;
inline void BasicResponse::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BasicResponse::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BasicResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.userLoginManage.BasicResponse.timestamp)
  return _internal_timestamp();
}
inline void BasicResponse::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void BasicResponse::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:proto.userLoginManage.BasicResponse.timestamp)
}

// int32 code = 2;
inline void BasicResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BasicResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BasicResponse::code() const {
  // @@protoc_insertion_point(field_get:proto.userLoginManage.BasicResponse.code)
  return _internal_code();
}
inline void BasicResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void BasicResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:proto.userLoginManage.BasicResponse.code)
}

// string msg = 3;
inline void BasicResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BasicResponse::msg() const {
  // @@protoc_insertion_point(field_get:proto.userLoginManage.BasicResponse.msg)
  return _internal_msg();
}
inline void BasicResponse::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:proto.userLoginManage.BasicResponse.msg)
}
inline std::string* BasicResponse::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:proto.userLoginManage.BasicResponse.msg)
  return _internal_mutable_msg();
}
inline const std::string& BasicResponse::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void BasicResponse::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BasicResponse::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.userLoginManage.BasicResponse.msg)
}
inline void BasicResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.userLoginManage.BasicResponse.msg)
}
inline void BasicResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.userLoginManage.BasicResponse.msg)
}
inline std::string* BasicResponse::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BasicResponse::release_msg() {
  // @@protoc_insertion_point(field_release:proto.userLoginManage.BasicResponse.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BasicResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:proto.userLoginManage.BasicResponse.msg)
}

// -------------------------------------------------------------------

// RegistRequest

// .proto.userLoginManage.BasicRequest basic = 1;
inline bool RegistRequest::_internal_has_basic() const {
  return this != internal_default_instance() && basic_ != nullptr;
}
inline bool RegistRequest::has_basic() const {
  return _internal_has_basic();
}
inline void RegistRequest::clear_basic() {
  if (GetArenaNoVirtual() == nullptr && basic_ != nullptr) {
    delete basic_;
  }
  basic_ = nullptr;
}
inline const ::proto::userLoginManage::BasicRequest& RegistRequest::_internal_basic() const {
  const ::proto::userLoginManage::BasicRequest* p = basic_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::userLoginManage::BasicRequest*>(
      &::proto::userLoginManage::_BasicRequest_default_instance_);
}
inline const ::proto::userLoginManage::BasicRequest& RegistRequest::basic() const {
  // @@protoc_insertion_point(field_get:proto.userLoginManage.RegistRequest.basic)
  return _internal_basic();
}
inline ::proto::userLoginManage::BasicRequest* RegistRequest::release_basic() {
  // @@protoc_insertion_point(field_release:proto.userLoginManage.RegistRequest.basic)
  
  ::proto::userLoginManage::BasicRequest* temp = basic_;
  basic_ = nullptr;
  return temp;
}
inline ::proto::userLoginManage::BasicRequest* RegistRequest::_internal_mutable_basic() {
  
  if (basic_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::userLoginManage::BasicRequest>(GetArenaNoVirtual());
    basic_ = p;
  }
  return basic_;
}
inline ::proto::userLoginManage::BasicRequest* RegistRequest::mutable_basic() {
  // @@protoc_insertion_point(field_mutable:proto.userLoginManage.RegistRequest.basic)
  return _internal_mutable_basic();
}
inline void RegistRequest::set_allocated_basic(::proto::userLoginManage::BasicRequest* basic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete basic_;
  }
  if (basic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      basic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basic, submessage_arena);
    }
    
  } else {
    
  }
  basic_ = basic;
  // @@protoc_insertion_point(field_set_allocated:proto.userLoginManage.RegistRequest.basic)
}

// string user_name = 2;
inline void RegistRequest::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegistRequest::user_name() const {
  // @@protoc_insertion_point(field_get:proto.userLoginManage.RegistRequest.user_name)
  return _internal_user_name();
}
inline void RegistRequest::set_user_name(const std::string& value) {
  _internal_set_user_name(value);
  // @@protoc_insertion_point(field_set:proto.userLoginManage.RegistRequest.user_name)
}
inline std::string* RegistRequest::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:proto.userLoginManage.RegistRequest.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& RegistRequest::_internal_user_name() const {
  return user_name_.GetNoArena();
}
inline void RegistRequest::_internal_set_user_name(const std::string& value) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegistRequest::set_user_name(std::string&& value) {
  
  user_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.userLoginManage.RegistRequest.user_name)
}
inline void RegistRequest::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.userLoginManage.RegistRequest.user_name)
}
inline void RegistRequest::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.userLoginManage.RegistRequest.user_name)
}
inline std::string* RegistRequest::_internal_mutable_user_name() {
  
  return user_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegistRequest::release_user_name() {
  // @@protoc_insertion_point(field_release:proto.userLoginManage.RegistRequest.user_name)
  
  return user_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegistRequest::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:proto.userLoginManage.RegistRequest.user_name)
}

// string pass_word = 3;
inline void RegistRequest::clear_pass_word() {
  pass_word_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegistRequest::pass_word() const {
  // @@protoc_insertion_point(field_get:proto.userLoginManage.RegistRequest.pass_word)
  return _internal_pass_word();
}
inline void RegistRequest::set_pass_word(const std::string& value) {
  _internal_set_pass_word(value);
  // @@protoc_insertion_point(field_set:proto.userLoginManage.RegistRequest.pass_word)
}
inline std::string* RegistRequest::mutable_pass_word() {
  // @@protoc_insertion_point(field_mutable:proto.userLoginManage.RegistRequest.pass_word)
  return _internal_mutable_pass_word();
}
inline const std::string& RegistRequest::_internal_pass_word() const {
  return pass_word_.GetNoArena();
}
inline void RegistRequest::_internal_set_pass_word(const std::string& value) {
  
  pass_word_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegistRequest::set_pass_word(std::string&& value) {
  
  pass_word_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.userLoginManage.RegistRequest.pass_word)
}
inline void RegistRequest::set_pass_word(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pass_word_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.userLoginManage.RegistRequest.pass_word)
}
inline void RegistRequest::set_pass_word(const char* value, size_t size) {
  
  pass_word_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.userLoginManage.RegistRequest.pass_word)
}
inline std::string* RegistRequest::_internal_mutable_pass_word() {
  
  return pass_word_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegistRequest::release_pass_word() {
  // @@protoc_insertion_point(field_release:proto.userLoginManage.RegistRequest.pass_word)
  
  return pass_word_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegistRequest::set_allocated_pass_word(std::string* pass_word) {
  if (pass_word != nullptr) {
    
  } else {
    
  }
  pass_word_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pass_word);
  // @@protoc_insertion_point(field_set_allocated:proto.userLoginManage.RegistRequest.pass_word)
}

// -------------------------------------------------------------------

// RegistResponse

// .proto.userLoginManage.BasicResponse basic = 1;
inline bool RegistResponse::_internal_has_basic() const {
  return this != internal_default_instance() && basic_ != nullptr;
}
inline bool RegistResponse::has_basic() const {
  return _internal_has_basic();
}
inline void RegistResponse::clear_basic() {
  if (GetArenaNoVirtual() == nullptr && basic_ != nullptr) {
    delete basic_;
  }
  basic_ = nullptr;
}
inline const ::proto::userLoginManage::BasicResponse& RegistResponse::_internal_basic() const {
  const ::proto::userLoginManage::BasicResponse* p = basic_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::userLoginManage::BasicResponse*>(
      &::proto::userLoginManage::_BasicResponse_default_instance_);
}
inline const ::proto::userLoginManage::BasicResponse& RegistResponse::basic() const {
  // @@protoc_insertion_point(field_get:proto.userLoginManage.RegistResponse.basic)
  return _internal_basic();
}
inline ::proto::userLoginManage::BasicResponse* RegistResponse::release_basic() {
  // @@protoc_insertion_point(field_release:proto.userLoginManage.RegistResponse.basic)
  
  ::proto::userLoginManage::BasicResponse* temp = basic_;
  basic_ = nullptr;
  return temp;
}
inline ::proto::userLoginManage::BasicResponse* RegistResponse::_internal_mutable_basic() {
  
  if (basic_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::userLoginManage::BasicResponse>(GetArenaNoVirtual());
    basic_ = p;
  }
  return basic_;
}
inline ::proto::userLoginManage::BasicResponse* RegistResponse::mutable_basic() {
  // @@protoc_insertion_point(field_mutable:proto.userLoginManage.RegistResponse.basic)
  return _internal_mutable_basic();
}
inline void RegistResponse::set_allocated_basic(::proto::userLoginManage::BasicResponse* basic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete basic_;
  }
  if (basic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      basic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basic, submessage_arena);
    }
    
  } else {
    
  }
  basic_ = basic;
  // @@protoc_insertion_point(field_set_allocated:proto.userLoginManage.RegistResponse.basic)
}

// -------------------------------------------------------------------

// LoginRequest

// .proto.userLoginManage.BasicRequest basic = 1;
inline bool LoginRequest::_internal_has_basic() const {
  return this != internal_default_instance() && basic_ != nullptr;
}
inline bool LoginRequest::has_basic() const {
  return _internal_has_basic();
}
inline void LoginRequest::clear_basic() {
  if (GetArenaNoVirtual() == nullptr && basic_ != nullptr) {
    delete basic_;
  }
  basic_ = nullptr;
}
inline const ::proto::userLoginManage::BasicRequest& LoginRequest::_internal_basic() const {
  const ::proto::userLoginManage::BasicRequest* p = basic_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::userLoginManage::BasicRequest*>(
      &::proto::userLoginManage::_BasicRequest_default_instance_);
}
inline const ::proto::userLoginManage::BasicRequest& LoginRequest::basic() const {
  // @@protoc_insertion_point(field_get:proto.userLoginManage.LoginRequest.basic)
  return _internal_basic();
}
inline ::proto::userLoginManage::BasicRequest* LoginRequest::release_basic() {
  // @@protoc_insertion_point(field_release:proto.userLoginManage.LoginRequest.basic)
  
  ::proto::userLoginManage::BasicRequest* temp = basic_;
  basic_ = nullptr;
  return temp;
}
inline ::proto::userLoginManage::BasicRequest* LoginRequest::_internal_mutable_basic() {
  
  if (basic_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::userLoginManage::BasicRequest>(GetArenaNoVirtual());
    basic_ = p;
  }
  return basic_;
}
inline ::proto::userLoginManage::BasicRequest* LoginRequest::mutable_basic() {
  // @@protoc_insertion_point(field_mutable:proto.userLoginManage.LoginRequest.basic)
  return _internal_mutable_basic();
}
inline void LoginRequest::set_allocated_basic(::proto::userLoginManage::BasicRequest* basic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete basic_;
  }
  if (basic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      basic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basic, submessage_arena);
    }
    
  } else {
    
  }
  basic_ = basic;
  // @@protoc_insertion_point(field_set_allocated:proto.userLoginManage.LoginRequest.basic)
}

// string user_name = 2;
inline void LoginRequest::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRequest::user_name() const {
  // @@protoc_insertion_point(field_get:proto.userLoginManage.LoginRequest.user_name)
  return _internal_user_name();
}
inline void LoginRequest::set_user_name(const std::string& value) {
  _internal_set_user_name(value);
  // @@protoc_insertion_point(field_set:proto.userLoginManage.LoginRequest.user_name)
}
inline std::string* LoginRequest::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:proto.userLoginManage.LoginRequest.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& LoginRequest::_internal_user_name() const {
  return user_name_.GetNoArena();
}
inline void LoginRequest::_internal_set_user_name(const std::string& value) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginRequest::set_user_name(std::string&& value) {
  
  user_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.userLoginManage.LoginRequest.user_name)
}
inline void LoginRequest::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.userLoginManage.LoginRequest.user_name)
}
inline void LoginRequest::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.userLoginManage.LoginRequest.user_name)
}
inline std::string* LoginRequest::_internal_mutable_user_name() {
  
  return user_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRequest::release_user_name() {
  // @@protoc_insertion_point(field_release:proto.userLoginManage.LoginRequest.user_name)
  
  return user_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:proto.userLoginManage.LoginRequest.user_name)
}

// string pass_word = 3;
inline void LoginRequest::clear_pass_word() {
  pass_word_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRequest::pass_word() const {
  // @@protoc_insertion_point(field_get:proto.userLoginManage.LoginRequest.pass_word)
  return _internal_pass_word();
}
inline void LoginRequest::set_pass_word(const std::string& value) {
  _internal_set_pass_word(value);
  // @@protoc_insertion_point(field_set:proto.userLoginManage.LoginRequest.pass_word)
}
inline std::string* LoginRequest::mutable_pass_word() {
  // @@protoc_insertion_point(field_mutable:proto.userLoginManage.LoginRequest.pass_word)
  return _internal_mutable_pass_word();
}
inline const std::string& LoginRequest::_internal_pass_word() const {
  return pass_word_.GetNoArena();
}
inline void LoginRequest::_internal_set_pass_word(const std::string& value) {
  
  pass_word_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginRequest::set_pass_word(std::string&& value) {
  
  pass_word_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.userLoginManage.LoginRequest.pass_word)
}
inline void LoginRequest::set_pass_word(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pass_word_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.userLoginManage.LoginRequest.pass_word)
}
inline void LoginRequest::set_pass_word(const char* value, size_t size) {
  
  pass_word_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.userLoginManage.LoginRequest.pass_word)
}
inline std::string* LoginRequest::_internal_mutable_pass_word() {
  
  return pass_word_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRequest::release_pass_word() {
  // @@protoc_insertion_point(field_release:proto.userLoginManage.LoginRequest.pass_word)
  
  return pass_word_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_pass_word(std::string* pass_word) {
  if (pass_word != nullptr) {
    
  } else {
    
  }
  pass_word_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pass_word);
  // @@protoc_insertion_point(field_set_allocated:proto.userLoginManage.LoginRequest.pass_word)
}

// -------------------------------------------------------------------

// LoginResponse

// .proto.userLoginManage.BasicResponse basic = 1;
inline bool LoginResponse::_internal_has_basic() const {
  return this != internal_default_instance() && basic_ != nullptr;
}
inline bool LoginResponse::has_basic() const {
  return _internal_has_basic();
}
inline void LoginResponse::clear_basic() {
  if (GetArenaNoVirtual() == nullptr && basic_ != nullptr) {
    delete basic_;
  }
  basic_ = nullptr;
}
inline const ::proto::userLoginManage::BasicResponse& LoginResponse::_internal_basic() const {
  const ::proto::userLoginManage::BasicResponse* p = basic_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::userLoginManage::BasicResponse*>(
      &::proto::userLoginManage::_BasicResponse_default_instance_);
}
inline const ::proto::userLoginManage::BasicResponse& LoginResponse::basic() const {
  // @@protoc_insertion_point(field_get:proto.userLoginManage.LoginResponse.basic)
  return _internal_basic();
}
inline ::proto::userLoginManage::BasicResponse* LoginResponse::release_basic() {
  // @@protoc_insertion_point(field_release:proto.userLoginManage.LoginResponse.basic)
  
  ::proto::userLoginManage::BasicResponse* temp = basic_;
  basic_ = nullptr;
  return temp;
}
inline ::proto::userLoginManage::BasicResponse* LoginResponse::_internal_mutable_basic() {
  
  if (basic_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::userLoginManage::BasicResponse>(GetArenaNoVirtual());
    basic_ = p;
  }
  return basic_;
}
inline ::proto::userLoginManage::BasicResponse* LoginResponse::mutable_basic() {
  // @@protoc_insertion_point(field_mutable:proto.userLoginManage.LoginResponse.basic)
  return _internal_mutable_basic();
}
inline void LoginResponse::set_allocated_basic(::proto::userLoginManage::BasicResponse* basic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete basic_;
  }
  if (basic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      basic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basic, submessage_arena);
    }
    
  } else {
    
  }
  basic_ = basic;
  // @@protoc_insertion_point(field_set_allocated:proto.userLoginManage.LoginResponse.basic)
}

// -------------------------------------------------------------------

// LogoutRequest

// .proto.userLoginManage.BasicRequest basic = 1;
inline bool LogoutRequest::_internal_has_basic() const {
  return this != internal_default_instance() && basic_ != nullptr;
}
inline bool LogoutRequest::has_basic() const {
  return _internal_has_basic();
}
inline void LogoutRequest::clear_basic() {
  if (GetArenaNoVirtual() == nullptr && basic_ != nullptr) {
    delete basic_;
  }
  basic_ = nullptr;
}
inline const ::proto::userLoginManage::BasicRequest& LogoutRequest::_internal_basic() const {
  const ::proto::userLoginManage::BasicRequest* p = basic_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::userLoginManage::BasicRequest*>(
      &::proto::userLoginManage::_BasicRequest_default_instance_);
}
inline const ::proto::userLoginManage::BasicRequest& LogoutRequest::basic() const {
  // @@protoc_insertion_point(field_get:proto.userLoginManage.LogoutRequest.basic)
  return _internal_basic();
}
inline ::proto::userLoginManage::BasicRequest* LogoutRequest::release_basic() {
  // @@protoc_insertion_point(field_release:proto.userLoginManage.LogoutRequest.basic)
  
  ::proto::userLoginManage::BasicRequest* temp = basic_;
  basic_ = nullptr;
  return temp;
}
inline ::proto::userLoginManage::BasicRequest* LogoutRequest::_internal_mutable_basic() {
  
  if (basic_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::userLoginManage::BasicRequest>(GetArenaNoVirtual());
    basic_ = p;
  }
  return basic_;
}
inline ::proto::userLoginManage::BasicRequest* LogoutRequest::mutable_basic() {
  // @@protoc_insertion_point(field_mutable:proto.userLoginManage.LogoutRequest.basic)
  return _internal_mutable_basic();
}
inline void LogoutRequest::set_allocated_basic(::proto::userLoginManage::BasicRequest* basic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete basic_;
  }
  if (basic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      basic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basic, submessage_arena);
    }
    
  } else {
    
  }
  basic_ = basic;
  // @@protoc_insertion_point(field_set_allocated:proto.userLoginManage.LogoutRequest.basic)
}

// string user_name = 2;
inline void LogoutRequest::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogoutRequest::user_name() const {
  // @@protoc_insertion_point(field_get:proto.userLoginManage.LogoutRequest.user_name)
  return _internal_user_name();
}
inline void LogoutRequest::set_user_name(const std::string& value) {
  _internal_set_user_name(value);
  // @@protoc_insertion_point(field_set:proto.userLoginManage.LogoutRequest.user_name)
}
inline std::string* LogoutRequest::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:proto.userLoginManage.LogoutRequest.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& LogoutRequest::_internal_user_name() const {
  return user_name_.GetNoArena();
}
inline void LogoutRequest::_internal_set_user_name(const std::string& value) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogoutRequest::set_user_name(std::string&& value) {
  
  user_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.userLoginManage.LogoutRequest.user_name)
}
inline void LogoutRequest::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.userLoginManage.LogoutRequest.user_name)
}
inline void LogoutRequest::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.userLoginManage.LogoutRequest.user_name)
}
inline std::string* LogoutRequest::_internal_mutable_user_name() {
  
  return user_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogoutRequest::release_user_name() {
  // @@protoc_insertion_point(field_release:proto.userLoginManage.LogoutRequest.user_name)
  
  return user_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogoutRequest::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:proto.userLoginManage.LogoutRequest.user_name)
}

// -------------------------------------------------------------------

// LogoutResponse

// .proto.userLoginManage.BasicResponse basic = 1;
inline bool LogoutResponse::_internal_has_basic() const {
  return this != internal_default_instance() && basic_ != nullptr;
}
inline bool LogoutResponse::has_basic() const {
  return _internal_has_basic();
}
inline void LogoutResponse::clear_basic() {
  if (GetArenaNoVirtual() == nullptr && basic_ != nullptr) {
    delete basic_;
  }
  basic_ = nullptr;
}
inline const ::proto::userLoginManage::BasicResponse& LogoutResponse::_internal_basic() const {
  const ::proto::userLoginManage::BasicResponse* p = basic_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::userLoginManage::BasicResponse*>(
      &::proto::userLoginManage::_BasicResponse_default_instance_);
}
inline const ::proto::userLoginManage::BasicResponse& LogoutResponse::basic() const {
  // @@protoc_insertion_point(field_get:proto.userLoginManage.LogoutResponse.basic)
  return _internal_basic();
}
inline ::proto::userLoginManage::BasicResponse* LogoutResponse::release_basic() {
  // @@protoc_insertion_point(field_release:proto.userLoginManage.LogoutResponse.basic)
  
  ::proto::userLoginManage::BasicResponse* temp = basic_;
  basic_ = nullptr;
  return temp;
}
inline ::proto::userLoginManage::BasicResponse* LogoutResponse::_internal_mutable_basic() {
  
  if (basic_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::userLoginManage::BasicResponse>(GetArenaNoVirtual());
    basic_ = p;
  }
  return basic_;
}
inline ::proto::userLoginManage::BasicResponse* LogoutResponse::mutable_basic() {
  // @@protoc_insertion_point(field_mutable:proto.userLoginManage.LogoutResponse.basic)
  return _internal_mutable_basic();
}
inline void LogoutResponse::set_allocated_basic(::proto::userLoginManage::BasicResponse* basic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete basic_;
  }
  if (basic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      basic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basic, submessage_arena);
    }
    
  } else {
    
  }
  basic_ = basic;
  // @@protoc_insertion_point(field_set_allocated:proto.userLoginManage.LogoutResponse.basic)
}

// -------------------------------------------------------------------

// KickOutUserRequest

// .proto.userLoginManage.BasicRequest basic = 1;
inline bool KickOutUserRequest::_internal_has_basic() const {
  return this != internal_default_instance() && basic_ != nullptr;
}
inline bool KickOutUserRequest::has_basic() const {
  return _internal_has_basic();
}
inline void KickOutUserRequest::clear_basic() {
  if (GetArenaNoVirtual() == nullptr && basic_ != nullptr) {
    delete basic_;
  }
  basic_ = nullptr;
}
inline const ::proto::userLoginManage::BasicRequest& KickOutUserRequest::_internal_basic() const {
  const ::proto::userLoginManage::BasicRequest* p = basic_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::userLoginManage::BasicRequest*>(
      &::proto::userLoginManage::_BasicRequest_default_instance_);
}
inline const ::proto::userLoginManage::BasicRequest& KickOutUserRequest::basic() const {
  // @@protoc_insertion_point(field_get:proto.userLoginManage.KickOutUserRequest.basic)
  return _internal_basic();
}
inline ::proto::userLoginManage::BasicRequest* KickOutUserRequest::release_basic() {
  // @@protoc_insertion_point(field_release:proto.userLoginManage.KickOutUserRequest.basic)
  
  ::proto::userLoginManage::BasicRequest* temp = basic_;
  basic_ = nullptr;
  return temp;
}
inline ::proto::userLoginManage::BasicRequest* KickOutUserRequest::_internal_mutable_basic() {
  
  if (basic_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::userLoginManage::BasicRequest>(GetArenaNoVirtual());
    basic_ = p;
  }
  return basic_;
}
inline ::proto::userLoginManage::BasicRequest* KickOutUserRequest::mutable_basic() {
  // @@protoc_insertion_point(field_mutable:proto.userLoginManage.KickOutUserRequest.basic)
  return _internal_mutable_basic();
}
inline void KickOutUserRequest::set_allocated_basic(::proto::userLoginManage::BasicRequest* basic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete basic_;
  }
  if (basic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      basic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basic, submessage_arena);
    }
    
  } else {
    
  }
  basic_ = basic;
  // @@protoc_insertion_point(field_set_allocated:proto.userLoginManage.KickOutUserRequest.basic)
}

// string user_name = 2;
inline void KickOutUserRequest::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KickOutUserRequest::user_name() const {
  // @@protoc_insertion_point(field_get:proto.userLoginManage.KickOutUserRequest.user_name)
  return _internal_user_name();
}
inline void KickOutUserRequest::set_user_name(const std::string& value) {
  _internal_set_user_name(value);
  // @@protoc_insertion_point(field_set:proto.userLoginManage.KickOutUserRequest.user_name)
}
inline std::string* KickOutUserRequest::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:proto.userLoginManage.KickOutUserRequest.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& KickOutUserRequest::_internal_user_name() const {
  return user_name_.GetNoArena();
}
inline void KickOutUserRequest::_internal_set_user_name(const std::string& value) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KickOutUserRequest::set_user_name(std::string&& value) {
  
  user_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.userLoginManage.KickOutUserRequest.user_name)
}
inline void KickOutUserRequest::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.userLoginManage.KickOutUserRequest.user_name)
}
inline void KickOutUserRequest::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.userLoginManage.KickOutUserRequest.user_name)
}
inline std::string* KickOutUserRequest::_internal_mutable_user_name() {
  
  return user_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KickOutUserRequest::release_user_name() {
  // @@protoc_insertion_point(field_release:proto.userLoginManage.KickOutUserRequest.user_name)
  
  return user_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KickOutUserRequest::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:proto.userLoginManage.KickOutUserRequest.user_name)
}

// -------------------------------------------------------------------

// KickOutUserResponse

// .proto.userLoginManage.BasicResponse basic = 1;
inline bool KickOutUserResponse::_internal_has_basic() const {
  return this != internal_default_instance() && basic_ != nullptr;
}
inline bool KickOutUserResponse::has_basic() const {
  return _internal_has_basic();
}
inline void KickOutUserResponse::clear_basic() {
  if (GetArenaNoVirtual() == nullptr && basic_ != nullptr) {
    delete basic_;
  }
  basic_ = nullptr;
}
inline const ::proto::userLoginManage::BasicResponse& KickOutUserResponse::_internal_basic() const {
  const ::proto::userLoginManage::BasicResponse* p = basic_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::userLoginManage::BasicResponse*>(
      &::proto::userLoginManage::_BasicResponse_default_instance_);
}
inline const ::proto::userLoginManage::BasicResponse& KickOutUserResponse::basic() const {
  // @@protoc_insertion_point(field_get:proto.userLoginManage.KickOutUserResponse.basic)
  return _internal_basic();
}
inline ::proto::userLoginManage::BasicResponse* KickOutUserResponse::release_basic() {
  // @@protoc_insertion_point(field_release:proto.userLoginManage.KickOutUserResponse.basic)
  
  ::proto::userLoginManage::BasicResponse* temp = basic_;
  basic_ = nullptr;
  return temp;
}
inline ::proto::userLoginManage::BasicResponse* KickOutUserResponse::_internal_mutable_basic() {
  
  if (basic_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::userLoginManage::BasicResponse>(GetArenaNoVirtual());
    basic_ = p;
  }
  return basic_;
}
inline ::proto::userLoginManage::BasicResponse* KickOutUserResponse::mutable_basic() {
  // @@protoc_insertion_point(field_mutable:proto.userLoginManage.KickOutUserResponse.basic)
  return _internal_mutable_basic();
}
inline void KickOutUserResponse::set_allocated_basic(::proto::userLoginManage::BasicResponse* basic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete basic_;
  }
  if (basic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      basic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basic, submessage_arena);
    }
    
  } else {
    
  }
  basic_ = basic;
  // @@protoc_insertion_point(field_set_allocated:proto.userLoginManage.KickOutUserResponse.basic)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace userLoginManage
}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_userLoginManage_2eproto
