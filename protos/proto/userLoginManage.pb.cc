// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userLoginManage.proto

#include "userLoginManage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_userLoginManage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BasicRequest_userLoginManage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_userLoginManage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BasicResponse_userLoginManage_2eproto;
namespace proto {
namespace userLoginManage {
class BasicRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BasicRequest> _instance;
} _BasicRequest_default_instance_;
class BasicResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BasicResponse> _instance;
} _BasicResponse_default_instance_;
class RegistRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegistRequest> _instance;
} _RegistRequest_default_instance_;
class RegistResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegistResponse> _instance;
} _RegistResponse_default_instance_;
class LoginRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginRequest> _instance;
} _LoginRequest_default_instance_;
class LoginResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginResponse> _instance;
} _LoginResponse_default_instance_;
class LogoutRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogoutRequest> _instance;
} _LogoutRequest_default_instance_;
class LogoutResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogoutResponse> _instance;
} _LogoutResponse_default_instance_;
class KickOutUserRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KickOutUserRequest> _instance;
} _KickOutUserRequest_default_instance_;
class KickOutUserResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KickOutUserResponse> _instance;
} _KickOutUserResponse_default_instance_;
class HeartBeatRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeartBeatRequest> _instance;
} _HeartBeatRequest_default_instance_;
class HeartBeatResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeartBeatResponse> _instance;
} _HeartBeatResponse_default_instance_;
}  // namespace userLoginManage
}  // namespace proto
static void InitDefaultsscc_info_BasicRequest_userLoginManage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::userLoginManage::_BasicRequest_default_instance_;
    new (ptr) ::proto::userLoginManage::BasicRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::userLoginManage::BasicRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BasicRequest_userLoginManage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BasicRequest_userLoginManage_2eproto}, {}};

static void InitDefaultsscc_info_BasicResponse_userLoginManage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::userLoginManage::_BasicResponse_default_instance_;
    new (ptr) ::proto::userLoginManage::BasicResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::userLoginManage::BasicResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BasicResponse_userLoginManage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BasicResponse_userLoginManage_2eproto}, {}};

static void InitDefaultsscc_info_HeartBeatRequest_userLoginManage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::userLoginManage::_HeartBeatRequest_default_instance_;
    new (ptr) ::proto::userLoginManage::HeartBeatRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::userLoginManage::HeartBeatRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HeartBeatRequest_userLoginManage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HeartBeatRequest_userLoginManage_2eproto}, {
      &scc_info_BasicRequest_userLoginManage_2eproto.base,}};

static void InitDefaultsscc_info_HeartBeatResponse_userLoginManage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::userLoginManage::_HeartBeatResponse_default_instance_;
    new (ptr) ::proto::userLoginManage::HeartBeatResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::userLoginManage::HeartBeatResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HeartBeatResponse_userLoginManage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HeartBeatResponse_userLoginManage_2eproto}, {
      &scc_info_BasicResponse_userLoginManage_2eproto.base,}};

static void InitDefaultsscc_info_KickOutUserRequest_userLoginManage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::userLoginManage::_KickOutUserRequest_default_instance_;
    new (ptr) ::proto::userLoginManage::KickOutUserRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::userLoginManage::KickOutUserRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KickOutUserRequest_userLoginManage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KickOutUserRequest_userLoginManage_2eproto}, {
      &scc_info_BasicRequest_userLoginManage_2eproto.base,}};

static void InitDefaultsscc_info_KickOutUserResponse_userLoginManage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::userLoginManage::_KickOutUserResponse_default_instance_;
    new (ptr) ::proto::userLoginManage::KickOutUserResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::userLoginManage::KickOutUserResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KickOutUserResponse_userLoginManage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KickOutUserResponse_userLoginManage_2eproto}, {
      &scc_info_BasicResponse_userLoginManage_2eproto.base,}};

static void InitDefaultsscc_info_LoginRequest_userLoginManage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::userLoginManage::_LoginRequest_default_instance_;
    new (ptr) ::proto::userLoginManage::LoginRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::userLoginManage::LoginRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoginRequest_userLoginManage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoginRequest_userLoginManage_2eproto}, {
      &scc_info_BasicRequest_userLoginManage_2eproto.base,}};

static void InitDefaultsscc_info_LoginResponse_userLoginManage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::userLoginManage::_LoginResponse_default_instance_;
    new (ptr) ::proto::userLoginManage::LoginResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::userLoginManage::LoginResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoginResponse_userLoginManage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoginResponse_userLoginManage_2eproto}, {
      &scc_info_BasicResponse_userLoginManage_2eproto.base,}};

static void InitDefaultsscc_info_LogoutRequest_userLoginManage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::userLoginManage::_LogoutRequest_default_instance_;
    new (ptr) ::proto::userLoginManage::LogoutRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::userLoginManage::LogoutRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogoutRequest_userLoginManage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LogoutRequest_userLoginManage_2eproto}, {
      &scc_info_BasicRequest_userLoginManage_2eproto.base,}};

static void InitDefaultsscc_info_LogoutResponse_userLoginManage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::userLoginManage::_LogoutResponse_default_instance_;
    new (ptr) ::proto::userLoginManage::LogoutResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::userLoginManage::LogoutResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogoutResponse_userLoginManage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LogoutResponse_userLoginManage_2eproto}, {
      &scc_info_BasicResponse_userLoginManage_2eproto.base,}};

static void InitDefaultsscc_info_RegistRequest_userLoginManage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::userLoginManage::_RegistRequest_default_instance_;
    new (ptr) ::proto::userLoginManage::RegistRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::userLoginManage::RegistRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegistRequest_userLoginManage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RegistRequest_userLoginManage_2eproto}, {
      &scc_info_BasicRequest_userLoginManage_2eproto.base,}};

static void InitDefaultsscc_info_RegistResponse_userLoginManage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::userLoginManage::_RegistResponse_default_instance_;
    new (ptr) ::proto::userLoginManage::RegistResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::userLoginManage::RegistResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegistResponse_userLoginManage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RegistResponse_userLoginManage_2eproto}, {
      &scc_info_BasicResponse_userLoginManage_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_userLoginManage_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_userLoginManage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_userLoginManage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_userLoginManage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::BasicRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::BasicRequest, timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::BasicRequest, uuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::BasicResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::BasicResponse, timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::BasicResponse, code_),
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::BasicResponse, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::RegistRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::RegistRequest, basic_),
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::RegistRequest, user_name_),
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::RegistRequest, pass_word_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::RegistResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::RegistResponse, basic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::LoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::LoginRequest, basic_),
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::LoginRequest, user_name_),
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::LoginRequest, pass_word_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::LoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::LoginResponse, basic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::LogoutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::LogoutRequest, basic_),
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::LogoutRequest, user_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::LogoutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::LogoutResponse, basic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::KickOutUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::KickOutUserRequest, basic_),
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::KickOutUserRequest, user_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::KickOutUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::KickOutUserResponse, basic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::HeartBeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::HeartBeatRequest, basic_),
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::HeartBeatRequest, user_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::HeartBeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::HeartBeatResponse, basic_),
  PROTOBUF_FIELD_OFFSET(::proto::userLoginManage::HeartBeatResponse, operation_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::proto::userLoginManage::BasicRequest)},
  { 7, -1, sizeof(::proto::userLoginManage::BasicResponse)},
  { 15, -1, sizeof(::proto::userLoginManage::RegistRequest)},
  { 23, -1, sizeof(::proto::userLoginManage::RegistResponse)},
  { 29, -1, sizeof(::proto::userLoginManage::LoginRequest)},
  { 37, -1, sizeof(::proto::userLoginManage::LoginResponse)},
  { 43, -1, sizeof(::proto::userLoginManage::LogoutRequest)},
  { 50, -1, sizeof(::proto::userLoginManage::LogoutResponse)},
  { 56, -1, sizeof(::proto::userLoginManage::KickOutUserRequest)},
  { 63, -1, sizeof(::proto::userLoginManage::KickOutUserResponse)},
  { 69, -1, sizeof(::proto::userLoginManage::HeartBeatRequest)},
  { 76, -1, sizeof(::proto::userLoginManage::HeartBeatResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::userLoginManage::_BasicRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::userLoginManage::_BasicResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::userLoginManage::_RegistRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::userLoginManage::_RegistResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::userLoginManage::_LoginRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::userLoginManage::_LoginResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::userLoginManage::_LogoutRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::userLoginManage::_LogoutResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::userLoginManage::_KickOutUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::userLoginManage::_KickOutUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::userLoginManage::_HeartBeatRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::userLoginManage::_HeartBeatResponse_default_instance_),
};

const char descriptor_table_protodef_userLoginManage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025userLoginManage.proto\022\025proto.userLogin"
  "Manage\"/\n\014BasicRequest\022\021\n\ttimestamp\030\001 \001("
  "\003\022\014\n\004uuid\030\002 \001(\t\"=\n\rBasicResponse\022\021\n\ttime"
  "stamp\030\001 \001(\003\022\014\n\004code\030\002 \001(\005\022\013\n\003msg\030\003 \001(\t\"i"
  "\n\rRegistRequest\0222\n\005basic\030\001 \001(\0132#.proto.u"
  "serLoginManage.BasicRequest\022\021\n\tuser_name"
  "\030\002 \001(\t\022\021\n\tpass_word\030\003 \001(\t\"E\n\016RegistRespo"
  "nse\0223\n\005basic\030\001 \001(\0132$.proto.userLoginMana"
  "ge.BasicResponse\"h\n\014LoginRequest\0222\n\005basi"
  "c\030\001 \001(\0132#.proto.userLoginManage.BasicReq"
  "uest\022\021\n\tuser_name\030\002 \001(\t\022\021\n\tpass_word\030\003 \001"
  "(\t\"D\n\rLoginResponse\0223\n\005basic\030\001 \001(\0132$.pro"
  "to.userLoginManage.BasicResponse\"V\n\rLogo"
  "utRequest\0222\n\005basic\030\001 \001(\0132#.proto.userLog"
  "inManage.BasicRequest\022\021\n\tuser_name\030\002 \001(\t"
  "\"E\n\016LogoutResponse\0223\n\005basic\030\001 \001(\0132$.prot"
  "o.userLoginManage.BasicResponse\"[\n\022KickO"
  "utUserRequest\0222\n\005basic\030\001 \001(\0132#.proto.use"
  "rLoginManage.BasicRequest\022\021\n\tuser_name\030\002"
  " \001(\t\"J\n\023KickOutUserResponse\0223\n\005basic\030\001 \001"
  "(\0132$.proto.userLoginManage.BasicResponse"
  "\"Y\n\020HeartBeatRequest\0222\n\005basic\030\001 \001(\0132#.pr"
  "oto.userLoginManage.BasicRequest\022\021\n\tuser"
  "_name\030\002 \001(\t\"[\n\021HeartBeatResponse\0223\n\005basi"
  "c\030\001 \001(\0132$.proto.userLoginManage.BasicRes"
  "ponse\022\021\n\toperation\030\002 \001(\0052\376\003\n\026userLoginMa"
  "nageService\022[\n\006regist\022$.proto.userLoginM"
  "anage.RegistRequest\032%.proto.userLoginMan"
  "age.RegistResponse\"\000(\0010\001\022X\n\005login\022#.prot"
  "o.userLoginManage.LoginRequest\032$.proto.u"
  "serLoginManage.LoginResponse\"\000(\0010\001\022[\n\006lo"
  "gout\022$.proto.userLoginManage.LogoutReque"
  "st\032%.proto.userLoginManage.LogoutRespons"
  "e\"\000(\0010\001\022d\n\theartBeat\022\'.proto.userLoginMa"
  "nage.HeartBeatRequest\032(.proto.userLoginM"
  "anage.HeartBeatResponse\"\000(\0010\001\022j\n\013kickOut"
  "User\022).proto.userLoginManage.KickOutUser"
  "Request\032*.proto.userLoginManage.KickOutU"
  "serResponse\"\000(\0010\001BN\n2singleTerminaLoginS"
  "ystem.protos.loginManageServiceB\020loginMa"
  "nageProtoP\001\242\002\003TXHb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_userLoginManage_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_userLoginManage_2eproto_sccs[12] = {
  &scc_info_BasicRequest_userLoginManage_2eproto.base,
  &scc_info_BasicResponse_userLoginManage_2eproto.base,
  &scc_info_HeartBeatRequest_userLoginManage_2eproto.base,
  &scc_info_HeartBeatResponse_userLoginManage_2eproto.base,
  &scc_info_KickOutUserRequest_userLoginManage_2eproto.base,
  &scc_info_KickOutUserResponse_userLoginManage_2eproto.base,
  &scc_info_LoginRequest_userLoginManage_2eproto.base,
  &scc_info_LoginResponse_userLoginManage_2eproto.base,
  &scc_info_LogoutRequest_userLoginManage_2eproto.base,
  &scc_info_LogoutResponse_userLoginManage_2eproto.base,
  &scc_info_RegistRequest_userLoginManage_2eproto.base,
  &scc_info_RegistResponse_userLoginManage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_userLoginManage_2eproto_once;
static bool descriptor_table_userLoginManage_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_userLoginManage_2eproto = {
  &descriptor_table_userLoginManage_2eproto_initialized, descriptor_table_protodef_userLoginManage_2eproto, "userLoginManage.proto", 1625,
  &descriptor_table_userLoginManage_2eproto_once, descriptor_table_userLoginManage_2eproto_sccs, descriptor_table_userLoginManage_2eproto_deps, 12, 0,
  schemas, file_default_instances, TableStruct_userLoginManage_2eproto::offsets,
  file_level_metadata_userLoginManage_2eproto, 12, file_level_enum_descriptors_userLoginManage_2eproto, file_level_service_descriptors_userLoginManage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_userLoginManage_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_userLoginManage_2eproto), true);
namespace proto {
namespace userLoginManage {

// ===================================================================

void BasicRequest::InitAsDefaultInstance() {
}
class BasicRequest::_Internal {
 public:
};

BasicRequest::BasicRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.userLoginManage.BasicRequest)
}
BasicRequest::BasicRequest(const BasicRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:proto.userLoginManage.BasicRequest)
}

void BasicRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BasicRequest_userLoginManage_2eproto.base);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = PROTOBUF_LONGLONG(0);
}

BasicRequest::~BasicRequest() {
  // @@protoc_insertion_point(destructor:proto.userLoginManage.BasicRequest)
  SharedDtor();
}

void BasicRequest::SharedDtor() {
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BasicRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BasicRequest& BasicRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BasicRequest_userLoginManage_2eproto.base);
  return *internal_default_instance();
}


void BasicRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.userLoginManage.BasicRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* BasicRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.userLoginManage.BasicRequest.uuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BasicRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.userLoginManage.BasicRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string uuid = 2;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.userLoginManage.BasicRequest.uuid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.userLoginManage.BasicRequest)
  return target;
}

size_t BasicRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.userLoginManage.BasicRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 2;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BasicRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.userLoginManage.BasicRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BasicRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BasicRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.userLoginManage.BasicRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.userLoginManage.BasicRequest)
    MergeFrom(*source);
  }
}

void BasicRequest::MergeFrom(const BasicRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.userLoginManage.BasicRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void BasicRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.userLoginManage.BasicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicRequest::CopyFrom(const BasicRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.userLoginManage.BasicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicRequest::IsInitialized() const {
  return true;
}

void BasicRequest::InternalSwap(BasicRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BasicRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BasicResponse::InitAsDefaultInstance() {
}
class BasicResponse::_Internal {
 public:
};

BasicResponse::BasicResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.userLoginManage.BasicResponse)
}
BasicResponse::BasicResponse(const BasicResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:proto.userLoginManage.BasicResponse)
}

void BasicResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BasicResponse_userLoginManage_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(code_));
}

BasicResponse::~BasicResponse() {
  // @@protoc_insertion_point(destructor:proto.userLoginManage.BasicResponse)
  SharedDtor();
}

void BasicResponse::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BasicResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BasicResponse& BasicResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BasicResponse_userLoginManage_2eproto.base);
  return *internal_default_instance();
}


void BasicResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.userLoginManage.BasicResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(code_));
  _internal_metadata_.Clear();
}

const char* BasicResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.userLoginManage.BasicResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BasicResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.userLoginManage.BasicResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // int32 code = 2;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_code(), target);
  }

  // string msg = 3;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.userLoginManage.BasicResponse.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.userLoginManage.BasicResponse)
  return target;
}

size_t BasicResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.userLoginManage.BasicResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // int32 code = 2;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BasicResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.userLoginManage.BasicResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BasicResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BasicResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.userLoginManage.BasicResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.userLoginManage.BasicResponse)
    MergeFrom(*source);
  }
}

void BasicResponse::MergeFrom(const BasicResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.userLoginManage.BasicResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void BasicResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.userLoginManage.BasicResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicResponse::CopyFrom(const BasicResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.userLoginManage.BasicResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicResponse::IsInitialized() const {
  return true;
}

void BasicResponse::InternalSwap(BasicResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BasicResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegistRequest::InitAsDefaultInstance() {
  ::proto::userLoginManage::_RegistRequest_default_instance_._instance.get_mutable()->basic_ = const_cast< ::proto::userLoginManage::BasicRequest*>(
      ::proto::userLoginManage::BasicRequest::internal_default_instance());
}
class RegistRequest::_Internal {
 public:
  static const ::proto::userLoginManage::BasicRequest& basic(const RegistRequest* msg);
};

const ::proto::userLoginManage::BasicRequest&
RegistRequest::_Internal::basic(const RegistRequest* msg) {
  return *msg->basic_;
}
RegistRequest::RegistRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.userLoginManage.RegistRequest)
}
RegistRequest::RegistRequest(const RegistRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_name().empty()) {
    user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  pass_word_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pass_word().empty()) {
    pass_word_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pass_word_);
  }
  if (from._internal_has_basic()) {
    basic_ = new ::proto::userLoginManage::BasicRequest(*from.basic_);
  } else {
    basic_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.userLoginManage.RegistRequest)
}

void RegistRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegistRequest_userLoginManage_2eproto.base);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pass_word_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  basic_ = nullptr;
}

RegistRequest::~RegistRequest() {
  // @@protoc_insertion_point(destructor:proto.userLoginManage.RegistRequest)
  SharedDtor();
}

void RegistRequest::SharedDtor() {
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pass_word_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete basic_;
}

void RegistRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegistRequest& RegistRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegistRequest_userLoginManage_2eproto.base);
  return *internal_default_instance();
}


void RegistRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.userLoginManage.RegistRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pass_word_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && basic_ != nullptr) {
    delete basic_;
  }
  basic_ = nullptr;
  _internal_metadata_.Clear();
}

const char* RegistRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .proto.userLoginManage.BasicRequest basic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_basic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.userLoginManage.RegistRequest.user_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pass_word = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pass_word();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.userLoginManage.RegistRequest.pass_word"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegistRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.userLoginManage.RegistRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.userLoginManage.BasicRequest basic = 1;
  if (this->has_basic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::basic(this), target, stream);
  }

  // string user_name = 2;
  if (this->user_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.userLoginManage.RegistRequest.user_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_name(), target);
  }

  // string pass_word = 3;
  if (this->pass_word().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pass_word().data(), static_cast<int>(this->_internal_pass_word().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.userLoginManage.RegistRequest.pass_word");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pass_word(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.userLoginManage.RegistRequest)
  return target;
}

size_t RegistRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.userLoginManage.RegistRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name = 2;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // string pass_word = 3;
  if (this->pass_word().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pass_word());
  }

  // .proto.userLoginManage.BasicRequest basic = 1;
  if (this->has_basic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *basic_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegistRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.userLoginManage.RegistRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegistRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegistRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.userLoginManage.RegistRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.userLoginManage.RegistRequest)
    MergeFrom(*source);
  }
}

void RegistRequest::MergeFrom(const RegistRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.userLoginManage.RegistRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.pass_word().size() > 0) {

    pass_word_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pass_word_);
  }
  if (from.has_basic()) {
    _internal_mutable_basic()->::proto::userLoginManage::BasicRequest::MergeFrom(from._internal_basic());
  }
}

void RegistRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.userLoginManage.RegistRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegistRequest::CopyFrom(const RegistRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.userLoginManage.RegistRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistRequest::IsInitialized() const {
  return true;
}

void RegistRequest::InternalSwap(RegistRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pass_word_.Swap(&other->pass_word_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(basic_, other->basic_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegistRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegistResponse::InitAsDefaultInstance() {
  ::proto::userLoginManage::_RegistResponse_default_instance_._instance.get_mutable()->basic_ = const_cast< ::proto::userLoginManage::BasicResponse*>(
      ::proto::userLoginManage::BasicResponse::internal_default_instance());
}
class RegistResponse::_Internal {
 public:
  static const ::proto::userLoginManage::BasicResponse& basic(const RegistResponse* msg);
};

const ::proto::userLoginManage::BasicResponse&
RegistResponse::_Internal::basic(const RegistResponse* msg) {
  return *msg->basic_;
}
RegistResponse::RegistResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.userLoginManage.RegistResponse)
}
RegistResponse::RegistResponse(const RegistResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_basic()) {
    basic_ = new ::proto::userLoginManage::BasicResponse(*from.basic_);
  } else {
    basic_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.userLoginManage.RegistResponse)
}

void RegistResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegistResponse_userLoginManage_2eproto.base);
  basic_ = nullptr;
}

RegistResponse::~RegistResponse() {
  // @@protoc_insertion_point(destructor:proto.userLoginManage.RegistResponse)
  SharedDtor();
}

void RegistResponse::SharedDtor() {
  if (this != internal_default_instance()) delete basic_;
}

void RegistResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegistResponse& RegistResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegistResponse_userLoginManage_2eproto.base);
  return *internal_default_instance();
}


void RegistResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.userLoginManage.RegistResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && basic_ != nullptr) {
    delete basic_;
  }
  basic_ = nullptr;
  _internal_metadata_.Clear();
}

const char* RegistResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .proto.userLoginManage.BasicResponse basic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_basic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegistResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.userLoginManage.RegistResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.userLoginManage.BasicResponse basic = 1;
  if (this->has_basic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::basic(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.userLoginManage.RegistResponse)
  return target;
}

size_t RegistResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.userLoginManage.RegistResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.userLoginManage.BasicResponse basic = 1;
  if (this->has_basic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *basic_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegistResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.userLoginManage.RegistResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegistResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegistResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.userLoginManage.RegistResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.userLoginManage.RegistResponse)
    MergeFrom(*source);
  }
}

void RegistResponse::MergeFrom(const RegistResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.userLoginManage.RegistResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_basic()) {
    _internal_mutable_basic()->::proto::userLoginManage::BasicResponse::MergeFrom(from._internal_basic());
  }
}

void RegistResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.userLoginManage.RegistResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegistResponse::CopyFrom(const RegistResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.userLoginManage.RegistResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistResponse::IsInitialized() const {
  return true;
}

void RegistResponse::InternalSwap(RegistResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(basic_, other->basic_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegistResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginRequest::InitAsDefaultInstance() {
  ::proto::userLoginManage::_LoginRequest_default_instance_._instance.get_mutable()->basic_ = const_cast< ::proto::userLoginManage::BasicRequest*>(
      ::proto::userLoginManage::BasicRequest::internal_default_instance());
}
class LoginRequest::_Internal {
 public:
  static const ::proto::userLoginManage::BasicRequest& basic(const LoginRequest* msg);
};

const ::proto::userLoginManage::BasicRequest&
LoginRequest::_Internal::basic(const LoginRequest* msg) {
  return *msg->basic_;
}
LoginRequest::LoginRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.userLoginManage.LoginRequest)
}
LoginRequest::LoginRequest(const LoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_name().empty()) {
    user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  pass_word_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pass_word().empty()) {
    pass_word_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pass_word_);
  }
  if (from._internal_has_basic()) {
    basic_ = new ::proto::userLoginManage::BasicRequest(*from.basic_);
  } else {
    basic_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.userLoginManage.LoginRequest)
}

void LoginRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginRequest_userLoginManage_2eproto.base);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pass_word_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  basic_ = nullptr;
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:proto.userLoginManage.LoginRequest)
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pass_word_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete basic_;
}

void LoginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginRequest& LoginRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginRequest_userLoginManage_2eproto.base);
  return *internal_default_instance();
}


void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.userLoginManage.LoginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pass_word_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && basic_ != nullptr) {
    delete basic_;
  }
  basic_ = nullptr;
  _internal_metadata_.Clear();
}

const char* LoginRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .proto.userLoginManage.BasicRequest basic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_basic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.userLoginManage.LoginRequest.user_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pass_word = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pass_word();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.userLoginManage.LoginRequest.pass_word"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.userLoginManage.LoginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.userLoginManage.BasicRequest basic = 1;
  if (this->has_basic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::basic(this), target, stream);
  }

  // string user_name = 2;
  if (this->user_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.userLoginManage.LoginRequest.user_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_name(), target);
  }

  // string pass_word = 3;
  if (this->pass_word().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pass_word().data(), static_cast<int>(this->_internal_pass_word().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.userLoginManage.LoginRequest.pass_word");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pass_word(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.userLoginManage.LoginRequest)
  return target;
}

size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.userLoginManage.LoginRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name = 2;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // string pass_word = 3;
  if (this->pass_word().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pass_word());
  }

  // .proto.userLoginManage.BasicRequest basic = 1;
  if (this->has_basic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *basic_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.userLoginManage.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.userLoginManage.LoginRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.userLoginManage.LoginRequest)
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.userLoginManage.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.pass_word().size() > 0) {

    pass_word_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pass_word_);
  }
  if (from.has_basic()) {
    _internal_mutable_basic()->::proto::userLoginManage::BasicRequest::MergeFrom(from._internal_basic());
  }
}

void LoginRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.userLoginManage.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.userLoginManage.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  return true;
}

void LoginRequest::InternalSwap(LoginRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pass_word_.Swap(&other->pass_word_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(basic_, other->basic_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginResponse::InitAsDefaultInstance() {
  ::proto::userLoginManage::_LoginResponse_default_instance_._instance.get_mutable()->basic_ = const_cast< ::proto::userLoginManage::BasicResponse*>(
      ::proto::userLoginManage::BasicResponse::internal_default_instance());
}
class LoginResponse::_Internal {
 public:
  static const ::proto::userLoginManage::BasicResponse& basic(const LoginResponse* msg);
};

const ::proto::userLoginManage::BasicResponse&
LoginResponse::_Internal::basic(const LoginResponse* msg) {
  return *msg->basic_;
}
LoginResponse::LoginResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.userLoginManage.LoginResponse)
}
LoginResponse::LoginResponse(const LoginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_basic()) {
    basic_ = new ::proto::userLoginManage::BasicResponse(*from.basic_);
  } else {
    basic_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.userLoginManage.LoginResponse)
}

void LoginResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginResponse_userLoginManage_2eproto.base);
  basic_ = nullptr;
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:proto.userLoginManage.LoginResponse)
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  if (this != internal_default_instance()) delete basic_;
}

void LoginResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginResponse& LoginResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginResponse_userLoginManage_2eproto.base);
  return *internal_default_instance();
}


void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.userLoginManage.LoginResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && basic_ != nullptr) {
    delete basic_;
  }
  basic_ = nullptr;
  _internal_metadata_.Clear();
}

const char* LoginResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .proto.userLoginManage.BasicResponse basic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_basic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.userLoginManage.LoginResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.userLoginManage.BasicResponse basic = 1;
  if (this->has_basic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::basic(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.userLoginManage.LoginResponse)
  return target;
}

size_t LoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.userLoginManage.LoginResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.userLoginManage.BasicResponse basic = 1;
  if (this->has_basic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *basic_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.userLoginManage.LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.userLoginManage.LoginResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.userLoginManage.LoginResponse)
    MergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.userLoginManage.LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_basic()) {
    _internal_mutable_basic()->::proto::userLoginManage::BasicResponse::MergeFrom(from._internal_basic());
  }
}

void LoginResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.userLoginManage.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.userLoginManage.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  return true;
}

void LoginResponse::InternalSwap(LoginResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(basic_, other->basic_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogoutRequest::InitAsDefaultInstance() {
  ::proto::userLoginManage::_LogoutRequest_default_instance_._instance.get_mutable()->basic_ = const_cast< ::proto::userLoginManage::BasicRequest*>(
      ::proto::userLoginManage::BasicRequest::internal_default_instance());
}
class LogoutRequest::_Internal {
 public:
  static const ::proto::userLoginManage::BasicRequest& basic(const LogoutRequest* msg);
};

const ::proto::userLoginManage::BasicRequest&
LogoutRequest::_Internal::basic(const LogoutRequest* msg) {
  return *msg->basic_;
}
LogoutRequest::LogoutRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.userLoginManage.LogoutRequest)
}
LogoutRequest::LogoutRequest(const LogoutRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_name().empty()) {
    user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from._internal_has_basic()) {
    basic_ = new ::proto::userLoginManage::BasicRequest(*from.basic_);
  } else {
    basic_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.userLoginManage.LogoutRequest)
}

void LogoutRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogoutRequest_userLoginManage_2eproto.base);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  basic_ = nullptr;
}

LogoutRequest::~LogoutRequest() {
  // @@protoc_insertion_point(destructor:proto.userLoginManage.LogoutRequest)
  SharedDtor();
}

void LogoutRequest::SharedDtor() {
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete basic_;
}

void LogoutRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogoutRequest& LogoutRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogoutRequest_userLoginManage_2eproto.base);
  return *internal_default_instance();
}


void LogoutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.userLoginManage.LogoutRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && basic_ != nullptr) {
    delete basic_;
  }
  basic_ = nullptr;
  _internal_metadata_.Clear();
}

const char* LogoutRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .proto.userLoginManage.BasicRequest basic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_basic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.userLoginManage.LogoutRequest.user_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogoutRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.userLoginManage.LogoutRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.userLoginManage.BasicRequest basic = 1;
  if (this->has_basic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::basic(this), target, stream);
  }

  // string user_name = 2;
  if (this->user_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.userLoginManage.LogoutRequest.user_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.userLoginManage.LogoutRequest)
  return target;
}

size_t LogoutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.userLoginManage.LogoutRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name = 2;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // .proto.userLoginManage.BasicRequest basic = 1;
  if (this->has_basic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *basic_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogoutRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.userLoginManage.LogoutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LogoutRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogoutRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.userLoginManage.LogoutRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.userLoginManage.LogoutRequest)
    MergeFrom(*source);
  }
}

void LogoutRequest::MergeFrom(const LogoutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.userLoginManage.LogoutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.has_basic()) {
    _internal_mutable_basic()->::proto::userLoginManage::BasicRequest::MergeFrom(from._internal_basic());
  }
}

void LogoutRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.userLoginManage.LogoutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutRequest::CopyFrom(const LogoutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.userLoginManage.LogoutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutRequest::IsInitialized() const {
  return true;
}

void LogoutRequest::InternalSwap(LogoutRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(basic_, other->basic_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogoutRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogoutResponse::InitAsDefaultInstance() {
  ::proto::userLoginManage::_LogoutResponse_default_instance_._instance.get_mutable()->basic_ = const_cast< ::proto::userLoginManage::BasicResponse*>(
      ::proto::userLoginManage::BasicResponse::internal_default_instance());
}
class LogoutResponse::_Internal {
 public:
  static const ::proto::userLoginManage::BasicResponse& basic(const LogoutResponse* msg);
};

const ::proto::userLoginManage::BasicResponse&
LogoutResponse::_Internal::basic(const LogoutResponse* msg) {
  return *msg->basic_;
}
LogoutResponse::LogoutResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.userLoginManage.LogoutResponse)
}
LogoutResponse::LogoutResponse(const LogoutResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_basic()) {
    basic_ = new ::proto::userLoginManage::BasicResponse(*from.basic_);
  } else {
    basic_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.userLoginManage.LogoutResponse)
}

void LogoutResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogoutResponse_userLoginManage_2eproto.base);
  basic_ = nullptr;
}

LogoutResponse::~LogoutResponse() {
  // @@protoc_insertion_point(destructor:proto.userLoginManage.LogoutResponse)
  SharedDtor();
}

void LogoutResponse::SharedDtor() {
  if (this != internal_default_instance()) delete basic_;
}

void LogoutResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogoutResponse& LogoutResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogoutResponse_userLoginManage_2eproto.base);
  return *internal_default_instance();
}


void LogoutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.userLoginManage.LogoutResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && basic_ != nullptr) {
    delete basic_;
  }
  basic_ = nullptr;
  _internal_metadata_.Clear();
}

const char* LogoutResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .proto.userLoginManage.BasicResponse basic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_basic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogoutResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.userLoginManage.LogoutResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.userLoginManage.BasicResponse basic = 1;
  if (this->has_basic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::basic(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.userLoginManage.LogoutResponse)
  return target;
}

size_t LogoutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.userLoginManage.LogoutResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.userLoginManage.BasicResponse basic = 1;
  if (this->has_basic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *basic_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogoutResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.userLoginManage.LogoutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LogoutResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogoutResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.userLoginManage.LogoutResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.userLoginManage.LogoutResponse)
    MergeFrom(*source);
  }
}

void LogoutResponse::MergeFrom(const LogoutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.userLoginManage.LogoutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_basic()) {
    _internal_mutable_basic()->::proto::userLoginManage::BasicResponse::MergeFrom(from._internal_basic());
  }
}

void LogoutResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.userLoginManage.LogoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutResponse::CopyFrom(const LogoutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.userLoginManage.LogoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutResponse::IsInitialized() const {
  return true;
}

void LogoutResponse::InternalSwap(LogoutResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(basic_, other->basic_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogoutResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KickOutUserRequest::InitAsDefaultInstance() {
  ::proto::userLoginManage::_KickOutUserRequest_default_instance_._instance.get_mutable()->basic_ = const_cast< ::proto::userLoginManage::BasicRequest*>(
      ::proto::userLoginManage::BasicRequest::internal_default_instance());
}
class KickOutUserRequest::_Internal {
 public:
  static const ::proto::userLoginManage::BasicRequest& basic(const KickOutUserRequest* msg);
};

const ::proto::userLoginManage::BasicRequest&
KickOutUserRequest::_Internal::basic(const KickOutUserRequest* msg) {
  return *msg->basic_;
}
KickOutUserRequest::KickOutUserRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.userLoginManage.KickOutUserRequest)
}
KickOutUserRequest::KickOutUserRequest(const KickOutUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_name().empty()) {
    user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from._internal_has_basic()) {
    basic_ = new ::proto::userLoginManage::BasicRequest(*from.basic_);
  } else {
    basic_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.userLoginManage.KickOutUserRequest)
}

void KickOutUserRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KickOutUserRequest_userLoginManage_2eproto.base);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  basic_ = nullptr;
}

KickOutUserRequest::~KickOutUserRequest() {
  // @@protoc_insertion_point(destructor:proto.userLoginManage.KickOutUserRequest)
  SharedDtor();
}

void KickOutUserRequest::SharedDtor() {
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete basic_;
}

void KickOutUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KickOutUserRequest& KickOutUserRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KickOutUserRequest_userLoginManage_2eproto.base);
  return *internal_default_instance();
}


void KickOutUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.userLoginManage.KickOutUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && basic_ != nullptr) {
    delete basic_;
  }
  basic_ = nullptr;
  _internal_metadata_.Clear();
}

const char* KickOutUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .proto.userLoginManage.BasicRequest basic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_basic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.userLoginManage.KickOutUserRequest.user_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KickOutUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.userLoginManage.KickOutUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.userLoginManage.BasicRequest basic = 1;
  if (this->has_basic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::basic(this), target, stream);
  }

  // string user_name = 2;
  if (this->user_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.userLoginManage.KickOutUserRequest.user_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.userLoginManage.KickOutUserRequest)
  return target;
}

size_t KickOutUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.userLoginManage.KickOutUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name = 2;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // .proto.userLoginManage.BasicRequest basic = 1;
  if (this->has_basic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *basic_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KickOutUserRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.userLoginManage.KickOutUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KickOutUserRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KickOutUserRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.userLoginManage.KickOutUserRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.userLoginManage.KickOutUserRequest)
    MergeFrom(*source);
  }
}

void KickOutUserRequest::MergeFrom(const KickOutUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.userLoginManage.KickOutUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.has_basic()) {
    _internal_mutable_basic()->::proto::userLoginManage::BasicRequest::MergeFrom(from._internal_basic());
  }
}

void KickOutUserRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.userLoginManage.KickOutUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickOutUserRequest::CopyFrom(const KickOutUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.userLoginManage.KickOutUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickOutUserRequest::IsInitialized() const {
  return true;
}

void KickOutUserRequest::InternalSwap(KickOutUserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(basic_, other->basic_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KickOutUserRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KickOutUserResponse::InitAsDefaultInstance() {
  ::proto::userLoginManage::_KickOutUserResponse_default_instance_._instance.get_mutable()->basic_ = const_cast< ::proto::userLoginManage::BasicResponse*>(
      ::proto::userLoginManage::BasicResponse::internal_default_instance());
}
class KickOutUserResponse::_Internal {
 public:
  static const ::proto::userLoginManage::BasicResponse& basic(const KickOutUserResponse* msg);
};

const ::proto::userLoginManage::BasicResponse&
KickOutUserResponse::_Internal::basic(const KickOutUserResponse* msg) {
  return *msg->basic_;
}
KickOutUserResponse::KickOutUserResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.userLoginManage.KickOutUserResponse)
}
KickOutUserResponse::KickOutUserResponse(const KickOutUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_basic()) {
    basic_ = new ::proto::userLoginManage::BasicResponse(*from.basic_);
  } else {
    basic_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.userLoginManage.KickOutUserResponse)
}

void KickOutUserResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KickOutUserResponse_userLoginManage_2eproto.base);
  basic_ = nullptr;
}

KickOutUserResponse::~KickOutUserResponse() {
  // @@protoc_insertion_point(destructor:proto.userLoginManage.KickOutUserResponse)
  SharedDtor();
}

void KickOutUserResponse::SharedDtor() {
  if (this != internal_default_instance()) delete basic_;
}

void KickOutUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KickOutUserResponse& KickOutUserResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KickOutUserResponse_userLoginManage_2eproto.base);
  return *internal_default_instance();
}


void KickOutUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.userLoginManage.KickOutUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && basic_ != nullptr) {
    delete basic_;
  }
  basic_ = nullptr;
  _internal_metadata_.Clear();
}

const char* KickOutUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .proto.userLoginManage.BasicResponse basic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_basic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KickOutUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.userLoginManage.KickOutUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.userLoginManage.BasicResponse basic = 1;
  if (this->has_basic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::basic(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.userLoginManage.KickOutUserResponse)
  return target;
}

size_t KickOutUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.userLoginManage.KickOutUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.userLoginManage.BasicResponse basic = 1;
  if (this->has_basic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *basic_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KickOutUserResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.userLoginManage.KickOutUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const KickOutUserResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KickOutUserResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.userLoginManage.KickOutUserResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.userLoginManage.KickOutUserResponse)
    MergeFrom(*source);
  }
}

void KickOutUserResponse::MergeFrom(const KickOutUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.userLoginManage.KickOutUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_basic()) {
    _internal_mutable_basic()->::proto::userLoginManage::BasicResponse::MergeFrom(from._internal_basic());
  }
}

void KickOutUserResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.userLoginManage.KickOutUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickOutUserResponse::CopyFrom(const KickOutUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.userLoginManage.KickOutUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickOutUserResponse::IsInitialized() const {
  return true;
}

void KickOutUserResponse::InternalSwap(KickOutUserResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(basic_, other->basic_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KickOutUserResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HeartBeatRequest::InitAsDefaultInstance() {
  ::proto::userLoginManage::_HeartBeatRequest_default_instance_._instance.get_mutable()->basic_ = const_cast< ::proto::userLoginManage::BasicRequest*>(
      ::proto::userLoginManage::BasicRequest::internal_default_instance());
}
class HeartBeatRequest::_Internal {
 public:
  static const ::proto::userLoginManage::BasicRequest& basic(const HeartBeatRequest* msg);
};

const ::proto::userLoginManage::BasicRequest&
HeartBeatRequest::_Internal::basic(const HeartBeatRequest* msg) {
  return *msg->basic_;
}
HeartBeatRequest::HeartBeatRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.userLoginManage.HeartBeatRequest)
}
HeartBeatRequest::HeartBeatRequest(const HeartBeatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_name().empty()) {
    user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from._internal_has_basic()) {
    basic_ = new ::proto::userLoginManage::BasicRequest(*from.basic_);
  } else {
    basic_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.userLoginManage.HeartBeatRequest)
}

void HeartBeatRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HeartBeatRequest_userLoginManage_2eproto.base);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  basic_ = nullptr;
}

HeartBeatRequest::~HeartBeatRequest() {
  // @@protoc_insertion_point(destructor:proto.userLoginManage.HeartBeatRequest)
  SharedDtor();
}

void HeartBeatRequest::SharedDtor() {
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete basic_;
}

void HeartBeatRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeartBeatRequest& HeartBeatRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeartBeatRequest_userLoginManage_2eproto.base);
  return *internal_default_instance();
}


void HeartBeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.userLoginManage.HeartBeatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && basic_ != nullptr) {
    delete basic_;
  }
  basic_ = nullptr;
  _internal_metadata_.Clear();
}

const char* HeartBeatRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .proto.userLoginManage.BasicRequest basic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_basic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.userLoginManage.HeartBeatRequest.user_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeartBeatRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.userLoginManage.HeartBeatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.userLoginManage.BasicRequest basic = 1;
  if (this->has_basic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::basic(this), target, stream);
  }

  // string user_name = 2;
  if (this->user_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.userLoginManage.HeartBeatRequest.user_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.userLoginManage.HeartBeatRequest)
  return target;
}

size_t HeartBeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.userLoginManage.HeartBeatRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name = 2;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // .proto.userLoginManage.BasicRequest basic = 1;
  if (this->has_basic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *basic_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartBeatRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.userLoginManage.HeartBeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartBeatRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeartBeatRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.userLoginManage.HeartBeatRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.userLoginManage.HeartBeatRequest)
    MergeFrom(*source);
  }
}

void HeartBeatRequest::MergeFrom(const HeartBeatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.userLoginManage.HeartBeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.has_basic()) {
    _internal_mutable_basic()->::proto::userLoginManage::BasicRequest::MergeFrom(from._internal_basic());
  }
}

void HeartBeatRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.userLoginManage.HeartBeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatRequest::CopyFrom(const HeartBeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.userLoginManage.HeartBeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatRequest::IsInitialized() const {
  return true;
}

void HeartBeatRequest::InternalSwap(HeartBeatRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(basic_, other->basic_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartBeatRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HeartBeatResponse::InitAsDefaultInstance() {
  ::proto::userLoginManage::_HeartBeatResponse_default_instance_._instance.get_mutable()->basic_ = const_cast< ::proto::userLoginManage::BasicResponse*>(
      ::proto::userLoginManage::BasicResponse::internal_default_instance());
}
class HeartBeatResponse::_Internal {
 public:
  static const ::proto::userLoginManage::BasicResponse& basic(const HeartBeatResponse* msg);
};

const ::proto::userLoginManage::BasicResponse&
HeartBeatResponse::_Internal::basic(const HeartBeatResponse* msg) {
  return *msg->basic_;
}
HeartBeatResponse::HeartBeatResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.userLoginManage.HeartBeatResponse)
}
HeartBeatResponse::HeartBeatResponse(const HeartBeatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_basic()) {
    basic_ = new ::proto::userLoginManage::BasicResponse(*from.basic_);
  } else {
    basic_ = nullptr;
  }
  operation_ = from.operation_;
  // @@protoc_insertion_point(copy_constructor:proto.userLoginManage.HeartBeatResponse)
}

void HeartBeatResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HeartBeatResponse_userLoginManage_2eproto.base);
  ::memset(&basic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operation_) -
      reinterpret_cast<char*>(&basic_)) + sizeof(operation_));
}

HeartBeatResponse::~HeartBeatResponse() {
  // @@protoc_insertion_point(destructor:proto.userLoginManage.HeartBeatResponse)
  SharedDtor();
}

void HeartBeatResponse::SharedDtor() {
  if (this != internal_default_instance()) delete basic_;
}

void HeartBeatResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeartBeatResponse& HeartBeatResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeartBeatResponse_userLoginManage_2eproto.base);
  return *internal_default_instance();
}


void HeartBeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.userLoginManage.HeartBeatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && basic_ != nullptr) {
    delete basic_;
  }
  basic_ = nullptr;
  operation_ = 0;
  _internal_metadata_.Clear();
}

const char* HeartBeatResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .proto.userLoginManage.BasicResponse basic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_basic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          operation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeartBeatResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.userLoginManage.HeartBeatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.userLoginManage.BasicResponse basic = 1;
  if (this->has_basic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::basic(this), target, stream);
  }

  // int32 operation = 2;
  if (this->operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_operation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.userLoginManage.HeartBeatResponse)
  return target;
}

size_t HeartBeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.userLoginManage.HeartBeatResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.userLoginManage.BasicResponse basic = 1;
  if (this->has_basic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *basic_);
  }

  // int32 operation = 2;
  if (this->operation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_operation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartBeatResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.userLoginManage.HeartBeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartBeatResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeartBeatResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.userLoginManage.HeartBeatResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.userLoginManage.HeartBeatResponse)
    MergeFrom(*source);
  }
}

void HeartBeatResponse::MergeFrom(const HeartBeatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.userLoginManage.HeartBeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_basic()) {
    _internal_mutable_basic()->::proto::userLoginManage::BasicResponse::MergeFrom(from._internal_basic());
  }
  if (from.operation() != 0) {
    _internal_set_operation(from._internal_operation());
  }
}

void HeartBeatResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.userLoginManage.HeartBeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatResponse::CopyFrom(const HeartBeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.userLoginManage.HeartBeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatResponse::IsInitialized() const {
  return true;
}

void HeartBeatResponse::InternalSwap(HeartBeatResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(basic_, other->basic_);
  swap(operation_, other->operation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartBeatResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace userLoginManage
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::userLoginManage::BasicRequest* Arena::CreateMaybeMessage< ::proto::userLoginManage::BasicRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::userLoginManage::BasicRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::userLoginManage::BasicResponse* Arena::CreateMaybeMessage< ::proto::userLoginManage::BasicResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::userLoginManage::BasicResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::userLoginManage::RegistRequest* Arena::CreateMaybeMessage< ::proto::userLoginManage::RegistRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::userLoginManage::RegistRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::userLoginManage::RegistResponse* Arena::CreateMaybeMessage< ::proto::userLoginManage::RegistResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::userLoginManage::RegistResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::userLoginManage::LoginRequest* Arena::CreateMaybeMessage< ::proto::userLoginManage::LoginRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::userLoginManage::LoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::userLoginManage::LoginResponse* Arena::CreateMaybeMessage< ::proto::userLoginManage::LoginResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::userLoginManage::LoginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::userLoginManage::LogoutRequest* Arena::CreateMaybeMessage< ::proto::userLoginManage::LogoutRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::userLoginManage::LogoutRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::userLoginManage::LogoutResponse* Arena::CreateMaybeMessage< ::proto::userLoginManage::LogoutResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::userLoginManage::LogoutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::userLoginManage::KickOutUserRequest* Arena::CreateMaybeMessage< ::proto::userLoginManage::KickOutUserRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::userLoginManage::KickOutUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::userLoginManage::KickOutUserResponse* Arena::CreateMaybeMessage< ::proto::userLoginManage::KickOutUserResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::userLoginManage::KickOutUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::userLoginManage::HeartBeatRequest* Arena::CreateMaybeMessage< ::proto::userLoginManage::HeartBeatRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::userLoginManage::HeartBeatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::userLoginManage::HeartBeatResponse* Arena::CreateMaybeMessage< ::proto::userLoginManage::HeartBeatResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::userLoginManage::HeartBeatResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
