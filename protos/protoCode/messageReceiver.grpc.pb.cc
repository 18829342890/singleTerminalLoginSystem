// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: messageReceiver.proto

#include "messageReceiver.pb.h"
#include "messageReceiver.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace proto {
namespace messageReceiver {

static const char* messageReceiver_method_names[] = {
  "/proto.messageReceiver.messageReceiver/regist",
  "/proto.messageReceiver.messageReceiver/login",
  "/proto.messageReceiver.messageReceiver/logout",
};

std::unique_ptr< messageReceiver::Stub> messageReceiver::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< messageReceiver::Stub> stub(new messageReceiver::Stub(channel));
  return stub;
}

messageReceiver::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_regist_(messageReceiver_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_login_(messageReceiver_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_logout_(messageReceiver_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status messageReceiver::Stub::regist(::grpc::ClientContext* context, const ::proto::messageReceiver::RegistRequest& request, ::proto::messageReceiver::RegistResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_regist_, context, request, response);
}

void messageReceiver::Stub::experimental_async::regist(::grpc::ClientContext* context, const ::proto::messageReceiver::RegistRequest* request, ::proto::messageReceiver::RegistResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_regist_, context, request, response, std::move(f));
}

void messageReceiver::Stub::experimental_async::regist(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::messageReceiver::RegistResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_regist_, context, request, response, std::move(f));
}

void messageReceiver::Stub::experimental_async::regist(::grpc::ClientContext* context, const ::proto::messageReceiver::RegistRequest* request, ::proto::messageReceiver::RegistResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_regist_, context, request, response, reactor);
}

void messageReceiver::Stub::experimental_async::regist(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::messageReceiver::RegistResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_regist_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::messageReceiver::RegistResponse>* messageReceiver::Stub::AsyncregistRaw(::grpc::ClientContext* context, const ::proto::messageReceiver::RegistRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proto::messageReceiver::RegistResponse>::Create(channel_.get(), cq, rpcmethod_regist_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::messageReceiver::RegistResponse>* messageReceiver::Stub::PrepareAsyncregistRaw(::grpc::ClientContext* context, const ::proto::messageReceiver::RegistRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proto::messageReceiver::RegistResponse>::Create(channel_.get(), cq, rpcmethod_regist_, context, request, false);
}

::grpc::Status messageReceiver::Stub::login(::grpc::ClientContext* context, const ::proto::messageReceiver::LoginRequest& request, ::proto::messageReceiver::LoginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_login_, context, request, response);
}

void messageReceiver::Stub::experimental_async::login(::grpc::ClientContext* context, const ::proto::messageReceiver::LoginRequest* request, ::proto::messageReceiver::LoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_login_, context, request, response, std::move(f));
}

void messageReceiver::Stub::experimental_async::login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::messageReceiver::LoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_login_, context, request, response, std::move(f));
}

void messageReceiver::Stub::experimental_async::login(::grpc::ClientContext* context, const ::proto::messageReceiver::LoginRequest* request, ::proto::messageReceiver::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_login_, context, request, response, reactor);
}

void messageReceiver::Stub::experimental_async::login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::messageReceiver::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::messageReceiver::LoginResponse>* messageReceiver::Stub::AsyncloginRaw(::grpc::ClientContext* context, const ::proto::messageReceiver::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proto::messageReceiver::LoginResponse>::Create(channel_.get(), cq, rpcmethod_login_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::messageReceiver::LoginResponse>* messageReceiver::Stub::PrepareAsyncloginRaw(::grpc::ClientContext* context, const ::proto::messageReceiver::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proto::messageReceiver::LoginResponse>::Create(channel_.get(), cq, rpcmethod_login_, context, request, false);
}

::grpc::Status messageReceiver::Stub::logout(::grpc::ClientContext* context, const ::proto::messageReceiver::LogoutRequest& request, ::proto::messageReceiver::LogoutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_logout_, context, request, response);
}

void messageReceiver::Stub::experimental_async::logout(::grpc::ClientContext* context, const ::proto::messageReceiver::LogoutRequest* request, ::proto::messageReceiver::LogoutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_logout_, context, request, response, std::move(f));
}

void messageReceiver::Stub::experimental_async::logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::messageReceiver::LogoutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_logout_, context, request, response, std::move(f));
}

void messageReceiver::Stub::experimental_async::logout(::grpc::ClientContext* context, const ::proto::messageReceiver::LogoutRequest* request, ::proto::messageReceiver::LogoutResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_logout_, context, request, response, reactor);
}

void messageReceiver::Stub::experimental_async::logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::messageReceiver::LogoutResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_logout_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::messageReceiver::LogoutResponse>* messageReceiver::Stub::AsynclogoutRaw(::grpc::ClientContext* context, const ::proto::messageReceiver::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proto::messageReceiver::LogoutResponse>::Create(channel_.get(), cq, rpcmethod_logout_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::messageReceiver::LogoutResponse>* messageReceiver::Stub::PrepareAsynclogoutRaw(::grpc::ClientContext* context, const ::proto::messageReceiver::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proto::messageReceiver::LogoutResponse>::Create(channel_.get(), cq, rpcmethod_logout_, context, request, false);
}

messageReceiver::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      messageReceiver_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< messageReceiver::Service, ::proto::messageReceiver::RegistRequest, ::proto::messageReceiver::RegistResponse>(
          std::mem_fn(&messageReceiver::Service::regist), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      messageReceiver_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< messageReceiver::Service, ::proto::messageReceiver::LoginRequest, ::proto::messageReceiver::LoginResponse>(
          std::mem_fn(&messageReceiver::Service::login), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      messageReceiver_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< messageReceiver::Service, ::proto::messageReceiver::LogoutRequest, ::proto::messageReceiver::LogoutResponse>(
          std::mem_fn(&messageReceiver::Service::logout), this)));
}

messageReceiver::Service::~Service() {
}

::grpc::Status messageReceiver::Service::regist(::grpc::ServerContext* context, const ::proto::messageReceiver::RegistRequest* request, ::proto::messageReceiver::RegistResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status messageReceiver::Service::login(::grpc::ServerContext* context, const ::proto::messageReceiver::LoginRequest* request, ::proto::messageReceiver::LoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status messageReceiver::Service::logout(::grpc::ServerContext* context, const ::proto::messageReceiver::LogoutRequest* request, ::proto::messageReceiver::LogoutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace proto
}  // namespace messageReceiver

