// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: messageReceiver.proto
#ifndef GRPC_messageReceiver_2eproto__INCLUDED
#define GRPC_messageReceiver_2eproto__INCLUDED

#include "messageReceiver.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace proto {
namespace messageReceiver {

class messageReceiver final {
 public:
  static constexpr char const* service_full_name() {
    return "proto.messageReceiver.messageReceiver";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // regist
    virtual ::grpc::Status regist(::grpc::ClientContext* context, const ::proto::messageReceiver::RegistRequest& request, ::proto::messageReceiver::RegistResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::messageReceiver::RegistResponse>> Asyncregist(::grpc::ClientContext* context, const ::proto::messageReceiver::RegistRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::messageReceiver::RegistResponse>>(AsyncregistRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::messageReceiver::RegistResponse>> PrepareAsyncregist(::grpc::ClientContext* context, const ::proto::messageReceiver::RegistRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::messageReceiver::RegistResponse>>(PrepareAsyncregistRaw(context, request, cq));
    }
    // login
    virtual ::grpc::Status login(::grpc::ClientContext* context, const ::proto::messageReceiver::LoginRequest& request, ::proto::messageReceiver::LoginResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::messageReceiver::LoginResponse>> Asynclogin(::grpc::ClientContext* context, const ::proto::messageReceiver::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::messageReceiver::LoginResponse>>(AsyncloginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::messageReceiver::LoginResponse>> PrepareAsynclogin(::grpc::ClientContext* context, const ::proto::messageReceiver::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::messageReceiver::LoginResponse>>(PrepareAsyncloginRaw(context, request, cq));
    }
    // logout
    virtual ::grpc::Status logout(::grpc::ClientContext* context, const ::proto::messageReceiver::LogoutRequest& request, ::proto::messageReceiver::LogoutResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::messageReceiver::LogoutResponse>> Asynclogout(::grpc::ClientContext* context, const ::proto::messageReceiver::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::messageReceiver::LogoutResponse>>(AsynclogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::messageReceiver::LogoutResponse>> PrepareAsynclogout(::grpc::ClientContext* context, const ::proto::messageReceiver::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::messageReceiver::LogoutResponse>>(PrepareAsynclogoutRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // regist
      virtual void regist(::grpc::ClientContext* context, const ::proto::messageReceiver::RegistRequest* request, ::proto::messageReceiver::RegistResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void regist(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::messageReceiver::RegistResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void regist(::grpc::ClientContext* context, const ::proto::messageReceiver::RegistRequest* request, ::proto::messageReceiver::RegistResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void regist(::grpc::ClientContext* context, const ::proto::messageReceiver::RegistRequest* request, ::proto::messageReceiver::RegistResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void regist(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::messageReceiver::RegistResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void regist(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::messageReceiver::RegistResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // login
      virtual void login(::grpc::ClientContext* context, const ::proto::messageReceiver::LoginRequest* request, ::proto::messageReceiver::LoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::messageReceiver::LoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void login(::grpc::ClientContext* context, const ::proto::messageReceiver::LoginRequest* request, ::proto::messageReceiver::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void login(::grpc::ClientContext* context, const ::proto::messageReceiver::LoginRequest* request, ::proto::messageReceiver::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::messageReceiver::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::messageReceiver::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // logout
      virtual void logout(::grpc::ClientContext* context, const ::proto::messageReceiver::LogoutRequest* request, ::proto::messageReceiver::LogoutResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::messageReceiver::LogoutResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void logout(::grpc::ClientContext* context, const ::proto::messageReceiver::LogoutRequest* request, ::proto::messageReceiver::LogoutResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void logout(::grpc::ClientContext* context, const ::proto::messageReceiver::LogoutRequest* request, ::proto::messageReceiver::LogoutResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::messageReceiver::LogoutResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::messageReceiver::LogoutResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::messageReceiver::RegistResponse>* AsyncregistRaw(::grpc::ClientContext* context, const ::proto::messageReceiver::RegistRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::messageReceiver::RegistResponse>* PrepareAsyncregistRaw(::grpc::ClientContext* context, const ::proto::messageReceiver::RegistRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::messageReceiver::LoginResponse>* AsyncloginRaw(::grpc::ClientContext* context, const ::proto::messageReceiver::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::messageReceiver::LoginResponse>* PrepareAsyncloginRaw(::grpc::ClientContext* context, const ::proto::messageReceiver::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::messageReceiver::LogoutResponse>* AsynclogoutRaw(::grpc::ClientContext* context, const ::proto::messageReceiver::LogoutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::messageReceiver::LogoutResponse>* PrepareAsynclogoutRaw(::grpc::ClientContext* context, const ::proto::messageReceiver::LogoutRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status regist(::grpc::ClientContext* context, const ::proto::messageReceiver::RegistRequest& request, ::proto::messageReceiver::RegistResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::messageReceiver::RegistResponse>> Asyncregist(::grpc::ClientContext* context, const ::proto::messageReceiver::RegistRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::messageReceiver::RegistResponse>>(AsyncregistRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::messageReceiver::RegistResponse>> PrepareAsyncregist(::grpc::ClientContext* context, const ::proto::messageReceiver::RegistRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::messageReceiver::RegistResponse>>(PrepareAsyncregistRaw(context, request, cq));
    }
    ::grpc::Status login(::grpc::ClientContext* context, const ::proto::messageReceiver::LoginRequest& request, ::proto::messageReceiver::LoginResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::messageReceiver::LoginResponse>> Asynclogin(::grpc::ClientContext* context, const ::proto::messageReceiver::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::messageReceiver::LoginResponse>>(AsyncloginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::messageReceiver::LoginResponse>> PrepareAsynclogin(::grpc::ClientContext* context, const ::proto::messageReceiver::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::messageReceiver::LoginResponse>>(PrepareAsyncloginRaw(context, request, cq));
    }
    ::grpc::Status logout(::grpc::ClientContext* context, const ::proto::messageReceiver::LogoutRequest& request, ::proto::messageReceiver::LogoutResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::messageReceiver::LogoutResponse>> Asynclogout(::grpc::ClientContext* context, const ::proto::messageReceiver::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::messageReceiver::LogoutResponse>>(AsynclogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::messageReceiver::LogoutResponse>> PrepareAsynclogout(::grpc::ClientContext* context, const ::proto::messageReceiver::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::messageReceiver::LogoutResponse>>(PrepareAsynclogoutRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void regist(::grpc::ClientContext* context, const ::proto::messageReceiver::RegistRequest* request, ::proto::messageReceiver::RegistResponse* response, std::function<void(::grpc::Status)>) override;
      void regist(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::messageReceiver::RegistResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void regist(::grpc::ClientContext* context, const ::proto::messageReceiver::RegistRequest* request, ::proto::messageReceiver::RegistResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void regist(::grpc::ClientContext* context, const ::proto::messageReceiver::RegistRequest* request, ::proto::messageReceiver::RegistResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void regist(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::messageReceiver::RegistResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void regist(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::messageReceiver::RegistResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void login(::grpc::ClientContext* context, const ::proto::messageReceiver::LoginRequest* request, ::proto::messageReceiver::LoginResponse* response, std::function<void(::grpc::Status)>) override;
      void login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::messageReceiver::LoginResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void login(::grpc::ClientContext* context, const ::proto::messageReceiver::LoginRequest* request, ::proto::messageReceiver::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void login(::grpc::ClientContext* context, const ::proto::messageReceiver::LoginRequest* request, ::proto::messageReceiver::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::messageReceiver::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::messageReceiver::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void logout(::grpc::ClientContext* context, const ::proto::messageReceiver::LogoutRequest* request, ::proto::messageReceiver::LogoutResponse* response, std::function<void(::grpc::Status)>) override;
      void logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::messageReceiver::LogoutResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void logout(::grpc::ClientContext* context, const ::proto::messageReceiver::LogoutRequest* request, ::proto::messageReceiver::LogoutResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void logout(::grpc::ClientContext* context, const ::proto::messageReceiver::LogoutRequest* request, ::proto::messageReceiver::LogoutResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::messageReceiver::LogoutResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::messageReceiver::LogoutResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::proto::messageReceiver::RegistResponse>* AsyncregistRaw(::grpc::ClientContext* context, const ::proto::messageReceiver::RegistRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::messageReceiver::RegistResponse>* PrepareAsyncregistRaw(::grpc::ClientContext* context, const ::proto::messageReceiver::RegistRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::messageReceiver::LoginResponse>* AsyncloginRaw(::grpc::ClientContext* context, const ::proto::messageReceiver::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::messageReceiver::LoginResponse>* PrepareAsyncloginRaw(::grpc::ClientContext* context, const ::proto::messageReceiver::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::messageReceiver::LogoutResponse>* AsynclogoutRaw(::grpc::ClientContext* context, const ::proto::messageReceiver::LogoutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::messageReceiver::LogoutResponse>* PrepareAsynclogoutRaw(::grpc::ClientContext* context, const ::proto::messageReceiver::LogoutRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_regist_;
    const ::grpc::internal::RpcMethod rpcmethod_login_;
    const ::grpc::internal::RpcMethod rpcmethod_logout_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // regist
    virtual ::grpc::Status regist(::grpc::ServerContext* context, const ::proto::messageReceiver::RegistRequest* request, ::proto::messageReceiver::RegistResponse* response);
    // login
    virtual ::grpc::Status login(::grpc::ServerContext* context, const ::proto::messageReceiver::LoginRequest* request, ::proto::messageReceiver::LoginResponse* response);
    // logout
    virtual ::grpc::Status logout(::grpc::ServerContext* context, const ::proto::messageReceiver::LogoutRequest* request, ::proto::messageReceiver::LogoutResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_regist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_regist() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_regist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status regist(::grpc::ServerContext* /*context*/, const ::proto::messageReceiver::RegistRequest* /*request*/, ::proto::messageReceiver::RegistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestregist(::grpc::ServerContext* context, ::proto::messageReceiver::RegistRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::messageReceiver::RegistResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_login() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::proto::messageReceiver::LoginRequest* /*request*/, ::proto::messageReceiver::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlogin(::grpc::ServerContext* context, ::proto::messageReceiver::LoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::messageReceiver::LoginResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_logout() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logout(::grpc::ServerContext* /*context*/, const ::proto::messageReceiver::LogoutRequest* /*request*/, ::proto::messageReceiver::LogoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlogout(::grpc::ServerContext* context, ::proto::messageReceiver::LogoutRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::messageReceiver::LogoutResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_regist<WithAsyncMethod_login<WithAsyncMethod_logout<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_regist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_regist() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::proto::messageReceiver::RegistRequest, ::proto::messageReceiver::RegistResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::proto::messageReceiver::RegistRequest* request, ::proto::messageReceiver::RegistResponse* response) { return this->regist(context, request, response); }));}
    void SetMessageAllocatorFor_regist(
        ::grpc::experimental::MessageAllocator< ::proto::messageReceiver::RegistRequest, ::proto::messageReceiver::RegistResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::proto::messageReceiver::RegistRequest, ::proto::messageReceiver::RegistResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_regist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status regist(::grpc::ServerContext* /*context*/, const ::proto::messageReceiver::RegistRequest* /*request*/, ::proto::messageReceiver::RegistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* regist(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::messageReceiver::RegistRequest* /*request*/, ::proto::messageReceiver::RegistResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* regist(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::proto::messageReceiver::RegistRequest* /*request*/, ::proto::messageReceiver::RegistResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_login() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::proto::messageReceiver::LoginRequest, ::proto::messageReceiver::LoginResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::proto::messageReceiver::LoginRequest* request, ::proto::messageReceiver::LoginResponse* response) { return this->login(context, request, response); }));}
    void SetMessageAllocatorFor_login(
        ::grpc::experimental::MessageAllocator< ::proto::messageReceiver::LoginRequest, ::proto::messageReceiver::LoginResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::proto::messageReceiver::LoginRequest, ::proto::messageReceiver::LoginResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::proto::messageReceiver::LoginRequest* /*request*/, ::proto::messageReceiver::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* login(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::messageReceiver::LoginRequest* /*request*/, ::proto::messageReceiver::LoginResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* login(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::proto::messageReceiver::LoginRequest* /*request*/, ::proto::messageReceiver::LoginResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_logout() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::proto::messageReceiver::LogoutRequest, ::proto::messageReceiver::LogoutResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::proto::messageReceiver::LogoutRequest* request, ::proto::messageReceiver::LogoutResponse* response) { return this->logout(context, request, response); }));}
    void SetMessageAllocatorFor_logout(
        ::grpc::experimental::MessageAllocator< ::proto::messageReceiver::LogoutRequest, ::proto::messageReceiver::LogoutResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::proto::messageReceiver::LogoutRequest, ::proto::messageReceiver::LogoutResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logout(::grpc::ServerContext* /*context*/, const ::proto::messageReceiver::LogoutRequest* /*request*/, ::proto::messageReceiver::LogoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* logout(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::messageReceiver::LogoutRequest* /*request*/, ::proto::messageReceiver::LogoutResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* logout(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::proto::messageReceiver::LogoutRequest* /*request*/, ::proto::messageReceiver::LogoutResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_regist<ExperimentalWithCallbackMethod_login<ExperimentalWithCallbackMethod_logout<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_regist<ExperimentalWithCallbackMethod_login<ExperimentalWithCallbackMethod_logout<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_regist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_regist() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_regist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status regist(::grpc::ServerContext* /*context*/, const ::proto::messageReceiver::RegistRequest* /*request*/, ::proto::messageReceiver::RegistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_login() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::proto::messageReceiver::LoginRequest* /*request*/, ::proto::messageReceiver::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_logout() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logout(::grpc::ServerContext* /*context*/, const ::proto::messageReceiver::LogoutRequest* /*request*/, ::proto::messageReceiver::LogoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_regist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_regist() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_regist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status regist(::grpc::ServerContext* /*context*/, const ::proto::messageReceiver::RegistRequest* /*request*/, ::proto::messageReceiver::RegistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestregist(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_login() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::proto::messageReceiver::LoginRequest* /*request*/, ::proto::messageReceiver::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_logout() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logout(::grpc::ServerContext* /*context*/, const ::proto::messageReceiver::LogoutRequest* /*request*/, ::proto::messageReceiver::LogoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlogout(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_regist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_regist() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->regist(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_regist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status regist(::grpc::ServerContext* /*context*/, const ::proto::messageReceiver::RegistRequest* /*request*/, ::proto::messageReceiver::RegistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* regist(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* regist(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_login() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->login(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::proto::messageReceiver::LoginRequest* /*request*/, ::proto::messageReceiver::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* login(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* login(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_logout() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->logout(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logout(::grpc::ServerContext* /*context*/, const ::proto::messageReceiver::LogoutRequest* /*request*/, ::proto::messageReceiver::LogoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* logout(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* logout(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_regist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_regist() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::proto::messageReceiver::RegistRequest, ::proto::messageReceiver::RegistResponse>(std::bind(&WithStreamedUnaryMethod_regist<BaseClass>::Streamedregist, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_regist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status regist(::grpc::ServerContext* /*context*/, const ::proto::messageReceiver::RegistRequest* /*request*/, ::proto::messageReceiver::RegistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedregist(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::messageReceiver::RegistRequest,::proto::messageReceiver::RegistResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_login() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::proto::messageReceiver::LoginRequest, ::proto::messageReceiver::LoginResponse>(std::bind(&WithStreamedUnaryMethod_login<BaseClass>::Streamedlogin, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::proto::messageReceiver::LoginRequest* /*request*/, ::proto::messageReceiver::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedlogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::messageReceiver::LoginRequest,::proto::messageReceiver::LoginResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_logout() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::proto::messageReceiver::LogoutRequest, ::proto::messageReceiver::LogoutResponse>(std::bind(&WithStreamedUnaryMethod_logout<BaseClass>::Streamedlogout, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status logout(::grpc::ServerContext* /*context*/, const ::proto::messageReceiver::LogoutRequest* /*request*/, ::proto::messageReceiver::LogoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedlogout(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::messageReceiver::LogoutRequest,::proto::messageReceiver::LogoutResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_regist<WithStreamedUnaryMethod_login<WithStreamedUnaryMethod_logout<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_regist<WithStreamedUnaryMethod_login<WithStreamedUnaryMethod_logout<Service > > > StreamedService;
};

}  // namespace messageReceiver
}  // namespace proto


#endif  // GRPC_messageReceiver_2eproto__INCLUDED
